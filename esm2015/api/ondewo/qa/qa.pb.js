import { BinaryReader, BinaryWriter } from 'google-protobuf';
import * as ondewoNlu002 from '../../ondewo/nlu/session.pb';
export class GetAnswerRequest {
    /**
     * Creates an object and applies default Protobuf values
     * @param GetAnswerRequest value
     */
    constructor(value) {
        value = value || {};
        this.sessionId = value.sessionId;
        this.text = value.text ? new ondewoNlu002.TextInput(value.text) : undefined;
        this.maxNumAnswers = value.maxNumAnswers;
        this.thresholdReader = value.thresholdReader;
        this.thresholdRetriever = value.thresholdRetriever;
        this.thresholdOverall = value.thresholdOverall;
        this.readerModelName = value.readerModelName;
        GetAnswerRequest.refineValues(this);
    }
    static toBinary(instance) {
        const writer = new BinaryWriter();
        GetAnswerRequest.toBinaryWriter(instance, writer);
        return writer.getResultBuffer();
    }
    static fromBinary(bytes) {
        const instance = new GetAnswerRequest();
        GetAnswerRequest.fromBinaryReader(instance, new BinaryReader(bytes));
        return instance;
    }
    static refineValues(instance) {
        instance.sessionId = instance.sessionId || '';
        instance.text = instance.text || undefined;
        instance.maxNumAnswers = instance.maxNumAnswers || 0;
        instance.thresholdReader = instance.thresholdReader || 0;
        instance.thresholdRetriever = instance.thresholdRetriever || 0;
        instance.thresholdOverall = instance.thresholdOverall || 0;
        instance.readerModelName = instance.readerModelName || '';
    }
    static fromBinaryReader(instance, reader) {
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    instance.sessionId = reader.readString();
                    break;
                case 2:
                    instance.text = new ondewoNlu002.TextInput();
                    reader.readMessage(instance.text, ondewoNlu002.TextInput.fromBinaryReader);
                    break;
                case 3:
                    instance.maxNumAnswers = reader.readInt32();
                    break;
                case 4:
                    instance.thresholdReader = reader.readFloat();
                    break;
                case 5:
                    instance.thresholdRetriever = reader.readFloat();
                    break;
                case 6:
                    instance.thresholdOverall = reader.readFloat();
                    break;
                case 7:
                    instance.readerModelName = reader.readString();
                    break;
                default:
                    reader.skipField();
            }
        }
        GetAnswerRequest.refineValues(instance);
    }
    static toBinaryWriter(instance, writer) {
        if (instance.sessionId) {
            writer.writeString(1, instance.sessionId);
        }
        if (instance.text) {
            writer.writeMessage(2, instance.text, ondewoNlu002.TextInput.toBinaryWriter);
        }
        if (instance.maxNumAnswers) {
            writer.writeInt32(3, instance.maxNumAnswers);
        }
        if (instance.thresholdReader) {
            writer.writeFloat(4, instance.thresholdReader);
        }
        if (instance.thresholdRetriever) {
            writer.writeFloat(5, instance.thresholdRetriever);
        }
        if (instance.thresholdOverall) {
            writer.writeFloat(6, instance.thresholdOverall);
        }
        if (instance.readerModelName) {
            writer.writeString(7, instance.readerModelName);
        }
    }
    get sessionId() {
        return this._sessionId;
    }
    set sessionId(value) {
        this._sessionId = value;
    }
    get text() {
        return this._text;
    }
    set text(value) {
        this._text = value;
    }
    get maxNumAnswers() {
        return this._maxNumAnswers;
    }
    set maxNumAnswers(value) {
        this._maxNumAnswers = value;
    }
    get thresholdReader() {
        return this._thresholdReader;
    }
    set thresholdReader(value) {
        this._thresholdReader = value;
    }
    get thresholdRetriever() {
        return this._thresholdRetriever;
    }
    set thresholdRetriever(value) {
        this._thresholdRetriever = value;
    }
    get thresholdOverall() {
        return this._thresholdOverall;
    }
    set thresholdOverall(value) {
        this._thresholdOverall = value;
    }
    get readerModelName() {
        return this._readerModelName;
    }
    set readerModelName(value) {
        this._readerModelName = value;
    }
    toObject() {
        return {
            sessionId: this.sessionId,
            text: this.text ? this.text.toObject() : undefined,
            maxNumAnswers: this.maxNumAnswers,
            thresholdReader: this.thresholdReader,
            thresholdRetriever: this.thresholdRetriever,
            thresholdOverall: this.thresholdOverall,
            readerModelName: this.readerModelName
        };
    }
    toJSON() {
        return this.toObject();
    }
}
export class GetAnswerResponse {
    /**
     * Creates an object and applies default Protobuf values
     * @param GetAnswerResponse value
     */
    constructor(value) {
        value = value || {};
        this.queryResult = value.queryResult
            ? new ondewoNlu002.DetectIntentResponse(value.queryResult)
            : undefined;
        GetAnswerResponse.refineValues(this);
    }
    static toBinary(instance) {
        const writer = new BinaryWriter();
        GetAnswerResponse.toBinaryWriter(instance, writer);
        return writer.getResultBuffer();
    }
    static fromBinary(bytes) {
        const instance = new GetAnswerResponse();
        GetAnswerResponse.fromBinaryReader(instance, new BinaryReader(bytes));
        return instance;
    }
    static refineValues(instance) {
        instance.queryResult = instance.queryResult || undefined;
    }
    static fromBinaryReader(instance, reader) {
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 2:
                    instance.queryResult = new ondewoNlu002.DetectIntentResponse();
                    reader.readMessage(instance.queryResult, ondewoNlu002.DetectIntentResponse.fromBinaryReader);
                    break;
                default:
                    reader.skipField();
            }
        }
        GetAnswerResponse.refineValues(instance);
    }
    static toBinaryWriter(instance, writer) {
        if (instance.queryResult) {
            writer.writeMessage(2, instance.queryResult, ondewoNlu002.DetectIntentResponse.toBinaryWriter);
        }
    }
    get queryResult() {
        return this._queryResult;
    }
    set queryResult(value) {
        this._queryResult = value;
    }
    toObject() {
        return {
            queryResult: this.queryResult ? this.queryResult.toObject() : undefined
        };
    }
    toJSON() {
        return this.toObject();
    }
}
export class RunScraperResponse {
    /**
     * Creates an object and applies default Protobuf values
     * @param RunScraperResponse value
     */
    constructor(value) {
        value = value || {};
        this.containerName = value.containerName;
        this.containerId = value.containerId;
        RunScraperResponse.refineValues(this);
    }
    static toBinary(instance) {
        const writer = new BinaryWriter();
        RunScraperResponse.toBinaryWriter(instance, writer);
        return writer.getResultBuffer();
    }
    static fromBinary(bytes) {
        const instance = new RunScraperResponse();
        RunScraperResponse.fromBinaryReader(instance, new BinaryReader(bytes));
        return instance;
    }
    static refineValues(instance) {
        instance.containerName = instance.containerName || '';
        instance.containerId = instance.containerId || '';
    }
    static fromBinaryReader(instance, reader) {
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    instance.containerName = reader.readString();
                    break;
                case 2:
                    instance.containerId = reader.readString();
                    break;
                default:
                    reader.skipField();
            }
        }
        RunScraperResponse.refineValues(instance);
    }
    static toBinaryWriter(instance, writer) {
        if (instance.containerName) {
            writer.writeString(1, instance.containerName);
        }
        if (instance.containerId) {
            writer.writeString(2, instance.containerId);
        }
    }
    get containerName() {
        return this._containerName;
    }
    set containerName(value) {
        this._containerName = value;
    }
    get containerId() {
        return this._containerId;
    }
    set containerId(value) {
        this._containerId = value;
    }
    toObject() {
        return {
            containerName: this.containerName,
            containerId: this.containerId
        };
    }
    toJSON() {
        return this.toObject();
    }
}
export class RunTrainingResponse {
    /**
     * Creates an object and applies default Protobuf values
     * @param RunTrainingResponse value
     */
    constructor(value) {
        value = value || {};
        this.f1 = value.f1;
        this.accuracy = value.accuracy;
        RunTrainingResponse.refineValues(this);
    }
    static toBinary(instance) {
        const writer = new BinaryWriter();
        RunTrainingResponse.toBinaryWriter(instance, writer);
        return writer.getResultBuffer();
    }
    static fromBinary(bytes) {
        const instance = new RunTrainingResponse();
        RunTrainingResponse.fromBinaryReader(instance, new BinaryReader(bytes));
        return instance;
    }
    static refineValues(instance) {
        instance.f1 = instance.f1 || 0;
        instance.accuracy = instance.accuracy || 0;
    }
    static fromBinaryReader(instance, reader) {
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    instance.f1 = reader.readFloat();
                    break;
                case 2:
                    instance.accuracy = reader.readFloat();
                    break;
                default:
                    reader.skipField();
            }
        }
        RunTrainingResponse.refineValues(instance);
    }
    static toBinaryWriter(instance, writer) {
        if (instance.f1) {
            writer.writeFloat(1, instance.f1);
        }
        if (instance.accuracy) {
            writer.writeFloat(2, instance.accuracy);
        }
    }
    get f1() {
        return this._f1;
    }
    set f1(value) {
        this._f1 = value;
    }
    get accuracy() {
        return this._accuracy;
    }
    set accuracy(value) {
        this._accuracy = value;
    }
    toObject() {
        return {
            f1: this.f1,
            accuracy: this.accuracy
        };
    }
    toJSON() {
        return this.toObject();
    }
}
//# sourceMappingURL=data:application/json;base64,