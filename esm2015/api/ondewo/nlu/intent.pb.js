import { BinaryReader, BinaryWriter } from 'google-protobuf';
import * as googleProtobuf004 from '@ngx-grpc/well-known-types';
import * as ondewoNlu007 from '../../ondewo/nlu/context.pb';
import * as ondewoNlu008 from '../../ondewo/nlu/common.pb';
import * as googleProtobuf010 from '@ngx-grpc/well-known-types';
export var IntentView;
(function (IntentView) {
    IntentView[IntentView["INTENT_VIEW_UNSPECIFIED"] = 0] = "INTENT_VIEW_UNSPECIFIED";
    IntentView[IntentView["INTENT_VIEW_FULL"] = 1] = "INTENT_VIEW_FULL";
    IntentView[IntentView["INTENT_VIEW_PARTIAL"] = 2] = "INTENT_VIEW_PARTIAL";
    IntentView[IntentView["INTENT_VIEW_SHALLOW"] = 3] = "INTENT_VIEW_SHALLOW";
})(IntentView || (IntentView = {}));
export var IntentCategory;
(function (IntentCategory) {
    IntentCategory[IntentCategory["ALL_INTENTS"] = 0] = "ALL_INTENTS";
    IntentCategory[IntentCategory["DEFAULT_INTENTS"] = 1] = "DEFAULT_INTENTS";
    IntentCategory[IntentCategory["USER_DEFINED_INTENTS"] = 2] = "USER_DEFINED_INTENTS";
})(IntentCategory || (IntentCategory = {}));
/**
 * Message implementation for ondewo.nlu.Intent
 */
export class Intent {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of Intent to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        this.displayName = _value.displayName;
        this.webhookState = _value.webhookState;
        this.priority = _value.priority;
        this.isFallback = _value.isFallback;
        this.mlDisabled = _value.mlDisabled;
        this.inputContextNames = (_value.inputContextNames || []).slice();
        this.events = (_value.events || []).slice();
        this.trainingPhrases = (_value.trainingPhrases || []).map(m => new Intent.TrainingPhrase(m));
        this.action = _value.action;
        this.outputContexts = (_value.outputContexts || []).map(m => new ondewoNlu007.Context(m));
        this.resetContexts = _value.resetContexts;
        this.parameters = (_value.parameters || []).map(m => new Intent.Parameter(m));
        this.messages = (_value.messages || []).map(m => new Intent.Message(m));
        this.defaultResponsePlatforms = (_value.defaultResponsePlatforms || []).slice();
        this.rootFollowupIntentName = _value.rootFollowupIntentName;
        this.parentFollowupIntentName = _value.parentFollowupIntentName;
        this.followupIntentInfo = (_value.followupIntentInfo || []).map(m => new Intent.FollowupIntentInfo(m));
        this.nextPageToken = _value.nextPageToken;
        this.domainName = _value.domainName;
        this.isStartOfDeviation = _value.isStartOfDeviation;
        this.isEndOfDeviation = _value.isEndOfDeviation;
        this.trainingPhraseCount = _value.trainingPhraseCount;
        this.status = _value.status;
        Intent.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new Intent();
        Intent.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
        _instance.displayName = _instance.displayName || '';
        _instance.webhookState = _instance.webhookState || 0;
        _instance.priority = _instance.priority || 0;
        _instance.isFallback = _instance.isFallback || false;
        _instance.mlDisabled = _instance.mlDisabled || false;
        _instance.inputContextNames = _instance.inputContextNames || [];
        _instance.events = _instance.events || [];
        _instance.trainingPhrases = _instance.trainingPhrases || [];
        _instance.action = _instance.action || '';
        _instance.outputContexts = _instance.outputContexts || [];
        _instance.resetContexts = _instance.resetContexts || false;
        _instance.parameters = _instance.parameters || [];
        _instance.messages = _instance.messages || [];
        _instance.defaultResponsePlatforms =
            _instance.defaultResponsePlatforms || [];
        _instance.rootFollowupIntentName = _instance.rootFollowupIntentName || '';
        _instance.parentFollowupIntentName =
            _instance.parentFollowupIntentName || '';
        _instance.followupIntentInfo = _instance.followupIntentInfo || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
        _instance.domainName = _instance.domainName || '';
        _instance.isStartOfDeviation = _instance.isStartOfDeviation || false;
        _instance.isEndOfDeviation = _instance.isEndOfDeviation || false;
        _instance.trainingPhraseCount = _instance.trainingPhraseCount || 0;
        _instance.status = _instance.status || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                case 2:
                    _instance.displayName = _reader.readString();
                    break;
                case 6:
                    _instance.webhookState = _reader.readEnum();
                    break;
                case 3:
                    _instance.priority = _reader.readInt32();
                    break;
                case 4:
                    _instance.isFallback = _reader.readBool();
                    break;
                case 19:
                    _instance.mlDisabled = _reader.readBool();
                    break;
                case 7:
                    (_instance.inputContextNames =
                        _instance.inputContextNames || []).push(_reader.readString());
                    break;
                case 8:
                    (_instance.events = _instance.events || []).push(_reader.readString());
                    break;
                case 9:
                    const messageInitializer9 = new Intent.TrainingPhrase();
                    _reader.readMessage(messageInitializer9, Intent.TrainingPhrase.deserializeBinaryFromReader);
                    (_instance.trainingPhrases = _instance.trainingPhrases || []).push(messageInitializer9);
                    break;
                case 10:
                    _instance.action = _reader.readString();
                    break;
                case 11:
                    const messageInitializer11 = new ondewoNlu007.Context();
                    _reader.readMessage(messageInitializer11, ondewoNlu007.Context.deserializeBinaryFromReader);
                    (_instance.outputContexts = _instance.outputContexts || []).push(messageInitializer11);
                    break;
                case 12:
                    _instance.resetContexts = _reader.readBool();
                    break;
                case 13:
                    const messageInitializer13 = new Intent.Parameter();
                    _reader.readMessage(messageInitializer13, Intent.Parameter.deserializeBinaryFromReader);
                    (_instance.parameters = _instance.parameters || []).push(messageInitializer13);
                    break;
                case 14:
                    const messageInitializer14 = new Intent.Message();
                    _reader.readMessage(messageInitializer14, Intent.Message.deserializeBinaryFromReader);
                    (_instance.messages = _instance.messages || []).push(messageInitializer14);
                    break;
                case 15:
                    (_instance.defaultResponsePlatforms =
                        _instance.defaultResponsePlatforms || []).push(...(_reader.readPackedEnum() || []));
                    break;
                case 16:
                    _instance.rootFollowupIntentName = _reader.readString();
                    break;
                case 17:
                    _instance.parentFollowupIntentName = _reader.readString();
                    break;
                case 18:
                    const messageInitializer18 = new Intent.FollowupIntentInfo();
                    _reader.readMessage(messageInitializer18, Intent.FollowupIntentInfo.deserializeBinaryFromReader);
                    (_instance.followupIntentInfo =
                        _instance.followupIntentInfo || []).push(messageInitializer18);
                    break;
                case 30:
                    _instance.nextPageToken = _reader.readString();
                    break;
                case 31:
                    _instance.domainName = _reader.readString();
                    break;
                case 32:
                    _instance.isStartOfDeviation = _reader.readBool();
                    break;
                case 33:
                    _instance.isEndOfDeviation = _reader.readBool();
                    break;
                case 34:
                    _instance.trainingPhraseCount = _reader.readInt32();
                    break;
                case 35:
                    _instance.status = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        Intent.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
        if (_instance.displayName) {
            _writer.writeString(2, _instance.displayName);
        }
        if (_instance.webhookState) {
            _writer.writeEnum(6, _instance.webhookState);
        }
        if (_instance.priority) {
            _writer.writeInt32(3, _instance.priority);
        }
        if (_instance.isFallback) {
            _writer.writeBool(4, _instance.isFallback);
        }
        if (_instance.mlDisabled) {
            _writer.writeBool(19, _instance.mlDisabled);
        }
        if (_instance.inputContextNames && _instance.inputContextNames.length) {
            _writer.writeRepeatedString(7, _instance.inputContextNames);
        }
        if (_instance.events && _instance.events.length) {
            _writer.writeRepeatedString(8, _instance.events);
        }
        if (_instance.trainingPhrases && _instance.trainingPhrases.length) {
            _writer.writeRepeatedMessage(9, _instance.trainingPhrases, Intent.TrainingPhrase.serializeBinaryToWriter);
        }
        if (_instance.action) {
            _writer.writeString(10, _instance.action);
        }
        if (_instance.outputContexts && _instance.outputContexts.length) {
            _writer.writeRepeatedMessage(11, _instance.outputContexts, ondewoNlu007.Context.serializeBinaryToWriter);
        }
        if (_instance.resetContexts) {
            _writer.writeBool(12, _instance.resetContexts);
        }
        if (_instance.parameters && _instance.parameters.length) {
            _writer.writeRepeatedMessage(13, _instance.parameters, Intent.Parameter.serializeBinaryToWriter);
        }
        if (_instance.messages && _instance.messages.length) {
            _writer.writeRepeatedMessage(14, _instance.messages, Intent.Message.serializeBinaryToWriter);
        }
        if (_instance.defaultResponsePlatforms &&
            _instance.defaultResponsePlatforms.length) {
            _writer.writePackedEnum(15, _instance.defaultResponsePlatforms);
        }
        if (_instance.rootFollowupIntentName) {
            _writer.writeString(16, _instance.rootFollowupIntentName);
        }
        if (_instance.parentFollowupIntentName) {
            _writer.writeString(17, _instance.parentFollowupIntentName);
        }
        if (_instance.followupIntentInfo && _instance.followupIntentInfo.length) {
            _writer.writeRepeatedMessage(18, _instance.followupIntentInfo, Intent.FollowupIntentInfo.serializeBinaryToWriter);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(30, _instance.nextPageToken);
        }
        if (_instance.domainName) {
            _writer.writeString(31, _instance.domainName);
        }
        if (_instance.isStartOfDeviation) {
            _writer.writeBool(32, _instance.isStartOfDeviation);
        }
        if (_instance.isEndOfDeviation) {
            _writer.writeBool(33, _instance.isEndOfDeviation);
        }
        if (_instance.trainingPhraseCount) {
            _writer.writeInt32(34, _instance.trainingPhraseCount);
        }
        if (_instance.status) {
            _writer.writeEnum(35, _instance.status);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get displayName() {
        return this._displayName;
    }
    set displayName(value) {
        this._displayName = value;
    }
    get webhookState() {
        return this._webhookState;
    }
    set webhookState(value) {
        this._webhookState = value;
    }
    get priority() {
        return this._priority;
    }
    set priority(value) {
        this._priority = value;
    }
    get isFallback() {
        return this._isFallback;
    }
    set isFallback(value) {
        this._isFallback = value;
    }
    get mlDisabled() {
        return this._mlDisabled;
    }
    set mlDisabled(value) {
        this._mlDisabled = value;
    }
    get inputContextNames() {
        return this._inputContextNames;
    }
    set inputContextNames(value) {
        this._inputContextNames = value;
    }
    get events() {
        return this._events;
    }
    set events(value) {
        this._events = value;
    }
    get trainingPhrases() {
        return this._trainingPhrases;
    }
    set trainingPhrases(value) {
        this._trainingPhrases = value;
    }
    get action() {
        return this._action;
    }
    set action(value) {
        this._action = value;
    }
    get outputContexts() {
        return this._outputContexts;
    }
    set outputContexts(value) {
        this._outputContexts = value;
    }
    get resetContexts() {
        return this._resetContexts;
    }
    set resetContexts(value) {
        this._resetContexts = value;
    }
    get parameters() {
        return this._parameters;
    }
    set parameters(value) {
        this._parameters = value;
    }
    get messages() {
        return this._messages;
    }
    set messages(value) {
        this._messages = value;
    }
    get defaultResponsePlatforms() {
        return this._defaultResponsePlatforms;
    }
    set defaultResponsePlatforms(value) {
        this._defaultResponsePlatforms = value;
    }
    get rootFollowupIntentName() {
        return this._rootFollowupIntentName;
    }
    set rootFollowupIntentName(value) {
        this._rootFollowupIntentName = value;
    }
    get parentFollowupIntentName() {
        return this._parentFollowupIntentName;
    }
    set parentFollowupIntentName(value) {
        this._parentFollowupIntentName = value;
    }
    get followupIntentInfo() {
        return this._followupIntentInfo;
    }
    set followupIntentInfo(value) {
        this._followupIntentInfo = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    get domainName() {
        return this._domainName;
    }
    set domainName(value) {
        this._domainName = value;
    }
    get isStartOfDeviation() {
        return this._isStartOfDeviation;
    }
    set isStartOfDeviation(value) {
        this._isStartOfDeviation = value;
    }
    get isEndOfDeviation() {
        return this._isEndOfDeviation;
    }
    set isEndOfDeviation(value) {
        this._isEndOfDeviation = value;
    }
    get trainingPhraseCount() {
        return this._trainingPhraseCount;
    }
    set trainingPhraseCount(value) {
        this._trainingPhraseCount = value;
    }
    get status() {
        return this._status;
    }
    set status(value) {
        this._status = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        Intent.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name,
            displayName: this.displayName,
            webhookState: this.webhookState,
            priority: this.priority,
            isFallback: this.isFallback,
            mlDisabled: this.mlDisabled,
            inputContextNames: (this.inputContextNames || []).slice(),
            events: (this.events || []).slice(),
            trainingPhrases: (this.trainingPhrases || []).map(m => m.toObject()),
            action: this.action,
            outputContexts: (this.outputContexts || []).map(m => m.toObject()),
            resetContexts: this.resetContexts,
            parameters: (this.parameters || []).map(m => m.toObject()),
            messages: (this.messages || []).map(m => m.toObject()),
            defaultResponsePlatforms: (this.defaultResponsePlatforms || []).slice(),
            rootFollowupIntentName: this.rootFollowupIntentName,
            parentFollowupIntentName: this.parentFollowupIntentName,
            followupIntentInfo: (this.followupIntentInfo || []).map(m => m.toObject()),
            nextPageToken: this.nextPageToken,
            domainName: this.domainName,
            isStartOfDeviation: this.isStartOfDeviation,
            isEndOfDeviation: this.isEndOfDeviation,
            trainingPhraseCount: this.trainingPhraseCount,
            status: this.status
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        var _a, _b;
        return {
            name: this.name,
            displayName: this.displayName,
            webhookState: Intent.WebhookState[(_a = this.webhookState) !== null && _a !== void 0 ? _a : 0],
            priority: this.priority,
            isFallback: this.isFallback,
            mlDisabled: this.mlDisabled,
            inputContextNames: (this.inputContextNames || []).slice(),
            events: (this.events || []).slice(),
            trainingPhrases: (this.trainingPhrases || []).map(m => m.toProtobufJSON(options)),
            action: this.action,
            outputContexts: (this.outputContexts || []).map(m => m.toProtobufJSON(options)),
            resetContexts: this.resetContexts,
            parameters: (this.parameters || []).map(m => m.toProtobufJSON(options)),
            messages: (this.messages || []).map(m => m.toProtobufJSON(options)),
            defaultResponsePlatforms: (this.defaultResponsePlatforms || []).map(v => Intent.Message.Platform[v]),
            rootFollowupIntentName: this.rootFollowupIntentName,
            parentFollowupIntentName: this.parentFollowupIntentName,
            followupIntentInfo: (this.followupIntentInfo || []).map(m => m.toProtobufJSON(options)),
            nextPageToken: this.nextPageToken,
            domainName: this.domainName,
            isStartOfDeviation: this.isStartOfDeviation,
            isEndOfDeviation: this.isEndOfDeviation,
            trainingPhraseCount: this.trainingPhraseCount,
            status: Intent.IntentStatus[(_b = this.status) !== null && _b !== void 0 ? _b : 0]
        };
    }
}
Intent.id = 'ondewo.nlu.Intent';
(function (Intent) {
    let IntentStatus;
    (function (IntentStatus) {
        IntentStatus[IntentStatus["ACTIVE"] = 0] = "ACTIVE";
        IntentStatus[IntentStatus["INACTIVE"] = 1] = "INACTIVE";
    })(IntentStatus = Intent.IntentStatus || (Intent.IntentStatus = {}));
    let WebhookState;
    (function (WebhookState) {
        WebhookState[WebhookState["WEBHOOK_STATE_UNSPECIFIED"] = 0] = "WEBHOOK_STATE_UNSPECIFIED";
        WebhookState[WebhookState["WEBHOOK_STATE_ENABLED"] = 1] = "WEBHOOK_STATE_ENABLED";
        WebhookState[WebhookState["WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING"] = 2] = "WEBHOOK_STATE_ENABLED_FOR_SLOT_FILLING";
    })(WebhookState = Intent.WebhookState || (Intent.WebhookState = {}));
    /**
     * Message implementation for ondewo.nlu.TrainingPhrase
     */
    class TrainingPhrase {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of TrainingPhrase to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.name = _value.name;
            this.type = _value.type;
            this.text = _value.text;
            this.entities = (_value.entities || []).map(m => new Intent.TrainingPhrase.Entity(m));
            this.timesAddedCount = _value.timesAddedCount;
            TrainingPhrase.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new TrainingPhrase();
            TrainingPhrase.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.name = _instance.name || '';
            _instance.type = _instance.type || 0;
            _instance.text = _instance.text || '';
            _instance.entities = _instance.entities || [];
            _instance.timesAddedCount = _instance.timesAddedCount || 0;
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.name = _reader.readString();
                        break;
                    case 2:
                        _instance.type = _reader.readEnum();
                        break;
                    case 3:
                        _instance.text = _reader.readString();
                        break;
                    case 4:
                        const messageInitializer4 = new Intent.TrainingPhrase.Entity();
                        _reader.readMessage(messageInitializer4, Intent.TrainingPhrase.Entity.deserializeBinaryFromReader);
                        (_instance.entities = _instance.entities || []).push(messageInitializer4);
                        break;
                    case 5:
                        _instance.timesAddedCount = _reader.readInt32();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            TrainingPhrase.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.name) {
                _writer.writeString(1, _instance.name);
            }
            if (_instance.type) {
                _writer.writeEnum(2, _instance.type);
            }
            if (_instance.text) {
                _writer.writeString(3, _instance.text);
            }
            if (_instance.entities && _instance.entities.length) {
                _writer.writeRepeatedMessage(4, _instance.entities, Intent.TrainingPhrase.Entity.serializeBinaryToWriter);
            }
            if (_instance.timesAddedCount) {
                _writer.writeInt32(5, _instance.timesAddedCount);
            }
        }
        get name() {
            return this._name;
        }
        set name(value) {
            this._name = value;
        }
        get type() {
            return this._type;
        }
        set type(value) {
            this._type = value;
        }
        get text() {
            return this._text;
        }
        set text(value) {
            this._text = value;
        }
        get entities() {
            return this._entities;
        }
        set entities(value) {
            this._entities = value;
        }
        get timesAddedCount() {
            return this._timesAddedCount;
        }
        set timesAddedCount(value) {
            this._timesAddedCount = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            TrainingPhrase.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                name: this.name,
                type: this.type,
                text: this.text,
                entities: (this.entities || []).map(m => m.toObject()),
                timesAddedCount: this.timesAddedCount
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            var _a;
            return {
                name: this.name,
                type: Intent.TrainingPhrase.Type[(_a = this.type) !== null && _a !== void 0 ? _a : 0],
                text: this.text,
                entities: (this.entities || []).map(m => m.toProtobufJSON(options)),
                timesAddedCount: this.timesAddedCount
            };
        }
    }
    TrainingPhrase.id = 'ondewo.nlu.TrainingPhrase';
    Intent.TrainingPhrase = TrainingPhrase;
    (function (TrainingPhrase) {
        let Type;
        (function (Type) {
            Type[Type["TYPE_UNSPECIFIED"] = 0] = "TYPE_UNSPECIFIED";
            Type[Type["EXAMPLE"] = 1] = "EXAMPLE";
            Type[Type["TEMPLATE"] = 2] = "TEMPLATE";
        })(Type = TrainingPhrase.Type || (TrainingPhrase.Type = {}));
        /**
         * Message implementation for ondewo.nlu.Entity
         */
        class Entity {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of Entity to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.entityTypeName = _value.entityTypeName;
                this.entityTypeDisplayName = _value.entityTypeDisplayName;
                this.entityValueName = _value.entityValueName;
                this.entityValueDisplayName = _value.entityValueDisplayName;
                this.start = _value.start;
                this.end = _value.end;
                this.parameterName = _value.parameterName;
                this.parameterDisplayName = _value.parameterDisplayName;
                Entity.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new Entity();
                Entity.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.entityTypeName = _instance.entityTypeName || '';
                _instance.entityTypeDisplayName = _instance.entityTypeDisplayName || '';
                _instance.entityValueName = _instance.entityValueName || '';
                _instance.entityValueDisplayName =
                    _instance.entityValueDisplayName || '';
                _instance.start = _instance.start || 0;
                _instance.end = _instance.end || 0;
                _instance.parameterName = _instance.parameterName || '';
                _instance.parameterDisplayName = _instance.parameterDisplayName || '';
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.entityTypeName = _reader.readString();
                            break;
                        case 3:
                            _instance.entityTypeDisplayName = _reader.readString();
                            break;
                        case 4:
                            _instance.entityValueName = _reader.readString();
                            break;
                        case 5:
                            _instance.entityValueDisplayName = _reader.readString();
                            break;
                        case 6:
                            _instance.start = _reader.readInt32();
                            break;
                        case 7:
                            _instance.end = _reader.readInt32();
                            break;
                        case 8:
                            _instance.parameterName = _reader.readString();
                            break;
                        case 9:
                            _instance.parameterDisplayName = _reader.readString();
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                Entity.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.entityTypeName) {
                    _writer.writeString(1, _instance.entityTypeName);
                }
                if (_instance.entityTypeDisplayName) {
                    _writer.writeString(3, _instance.entityTypeDisplayName);
                }
                if (_instance.entityValueName) {
                    _writer.writeString(4, _instance.entityValueName);
                }
                if (_instance.entityValueDisplayName) {
                    _writer.writeString(5, _instance.entityValueDisplayName);
                }
                if (_instance.start) {
                    _writer.writeInt32(6, _instance.start);
                }
                if (_instance.end) {
                    _writer.writeInt32(7, _instance.end);
                }
                if (_instance.parameterName) {
                    _writer.writeString(8, _instance.parameterName);
                }
                if (_instance.parameterDisplayName) {
                    _writer.writeString(9, _instance.parameterDisplayName);
                }
            }
            get entityTypeName() {
                return this._entityTypeName;
            }
            set entityTypeName(value) {
                this._entityTypeName = value;
            }
            get entityTypeDisplayName() {
                return this._entityTypeDisplayName;
            }
            set entityTypeDisplayName(value) {
                this._entityTypeDisplayName = value;
            }
            get entityValueName() {
                return this._entityValueName;
            }
            set entityValueName(value) {
                this._entityValueName = value;
            }
            get entityValueDisplayName() {
                return this._entityValueDisplayName;
            }
            set entityValueDisplayName(value) {
                this._entityValueDisplayName = value;
            }
            get start() {
                return this._start;
            }
            set start(value) {
                this._start = value;
            }
            get end() {
                return this._end;
            }
            set end(value) {
                this._end = value;
            }
            get parameterName() {
                return this._parameterName;
            }
            set parameterName(value) {
                this._parameterName = value;
            }
            get parameterDisplayName() {
                return this._parameterDisplayName;
            }
            set parameterDisplayName(value) {
                this._parameterDisplayName = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                Entity.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    entityTypeName: this.entityTypeName,
                    entityTypeDisplayName: this.entityTypeDisplayName,
                    entityValueName: this.entityValueName,
                    entityValueDisplayName: this.entityValueDisplayName,
                    start: this.start,
                    end: this.end,
                    parameterName: this.parameterName,
                    parameterDisplayName: this.parameterDisplayName
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    entityTypeName: this.entityTypeName,
                    entityTypeDisplayName: this.entityTypeDisplayName,
                    entityValueName: this.entityValueName,
                    entityValueDisplayName: this.entityValueDisplayName,
                    start: this.start,
                    end: this.end,
                    parameterName: this.parameterName,
                    parameterDisplayName: this.parameterDisplayName
                };
            }
        }
        Entity.id = 'ondewo.nlu.Entity';
        TrainingPhrase.Entity = Entity;
    })(TrainingPhrase = Intent.TrainingPhrase || (Intent.TrainingPhrase = {}));
    /**
     * Message implementation for ondewo.nlu.Parameter
     */
    class Parameter {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of Parameter to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.name = _value.name;
            this.displayName = _value.displayName;
            this.value = _value.value;
            this.defaultValue = _value.defaultValue;
            this.entityTypeName = _value.entityTypeName;
            this.entityTypeDisplayName = _value.entityTypeDisplayName;
            this.mandatory = _value.mandatory;
            this.prompts = (_value.prompts || []).slice();
            this.isList = _value.isList;
            Parameter.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new Parameter();
            Parameter.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.name = _instance.name || '';
            _instance.displayName = _instance.displayName || '';
            _instance.value = _instance.value || '';
            _instance.defaultValue = _instance.defaultValue || '';
            _instance.entityTypeName = _instance.entityTypeName || '';
            _instance.entityTypeDisplayName = _instance.entityTypeDisplayName || '';
            _instance.mandatory = _instance.mandatory || false;
            _instance.prompts = _instance.prompts || [];
            _instance.isList = _instance.isList || false;
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.name = _reader.readString();
                        break;
                    case 2:
                        _instance.displayName = _reader.readString();
                        break;
                    case 3:
                        _instance.value = _reader.readString();
                        break;
                    case 4:
                        _instance.defaultValue = _reader.readString();
                        break;
                    case 5:
                        _instance.entityTypeName = _reader.readString();
                        break;
                    case 6:
                        _instance.entityTypeDisplayName = _reader.readString();
                        break;
                    case 7:
                        _instance.mandatory = _reader.readBool();
                        break;
                    case 8:
                        (_instance.prompts = _instance.prompts || []).push(_reader.readString());
                        break;
                    case 9:
                        _instance.isList = _reader.readBool();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            Parameter.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.name) {
                _writer.writeString(1, _instance.name);
            }
            if (_instance.displayName) {
                _writer.writeString(2, _instance.displayName);
            }
            if (_instance.value) {
                _writer.writeString(3, _instance.value);
            }
            if (_instance.defaultValue) {
                _writer.writeString(4, _instance.defaultValue);
            }
            if (_instance.entityTypeName) {
                _writer.writeString(5, _instance.entityTypeName);
            }
            if (_instance.entityTypeDisplayName) {
                _writer.writeString(6, _instance.entityTypeDisplayName);
            }
            if (_instance.mandatory) {
                _writer.writeBool(7, _instance.mandatory);
            }
            if (_instance.prompts && _instance.prompts.length) {
                _writer.writeRepeatedString(8, _instance.prompts);
            }
            if (_instance.isList) {
                _writer.writeBool(9, _instance.isList);
            }
        }
        get name() {
            return this._name;
        }
        set name(value) {
            this._name = value;
        }
        get displayName() {
            return this._displayName;
        }
        set displayName(value) {
            this._displayName = value;
        }
        get value() {
            return this._value;
        }
        set value(value) {
            this._value = value;
        }
        get defaultValue() {
            return this._defaultValue;
        }
        set defaultValue(value) {
            this._defaultValue = value;
        }
        get entityTypeName() {
            return this._entityTypeName;
        }
        set entityTypeName(value) {
            this._entityTypeName = value;
        }
        get entityTypeDisplayName() {
            return this._entityTypeDisplayName;
        }
        set entityTypeDisplayName(value) {
            this._entityTypeDisplayName = value;
        }
        get mandatory() {
            return this._mandatory;
        }
        set mandatory(value) {
            this._mandatory = value;
        }
        get prompts() {
            return this._prompts;
        }
        set prompts(value) {
            this._prompts = value;
        }
        get isList() {
            return this._isList;
        }
        set isList(value) {
            this._isList = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            Parameter.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                name: this.name,
                displayName: this.displayName,
                value: this.value,
                defaultValue: this.defaultValue,
                entityTypeName: this.entityTypeName,
                entityTypeDisplayName: this.entityTypeDisplayName,
                mandatory: this.mandatory,
                prompts: (this.prompts || []).slice(),
                isList: this.isList
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                name: this.name,
                displayName: this.displayName,
                value: this.value,
                defaultValue: this.defaultValue,
                entityTypeName: this.entityTypeName,
                entityTypeDisplayName: this.entityTypeDisplayName,
                mandatory: this.mandatory,
                prompts: (this.prompts || []).slice(),
                isList: this.isList
            };
        }
    }
    Parameter.id = 'ondewo.nlu.Parameter';
    Intent.Parameter = Parameter;
    /**
     * Message implementation for ondewo.nlu.Message
     */
    class Message {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of Message to deeply clone from
         */
        constructor(_value) {
            this._message = Message.MessageCase.none;
            _value = _value || {};
            this.text = _value.text
                ? new Intent.Message.Text(_value.text)
                : undefined;
            this.image = _value.image
                ? new Intent.Message.Image(_value.image)
                : undefined;
            this.quickReplies = _value.quickReplies
                ? new Intent.Message.QuickReplies(_value.quickReplies)
                : undefined;
            this.card = _value.card
                ? new Intent.Message.Card(_value.card)
                : undefined;
            this.payload = _value.payload
                ? new googleProtobuf010.Struct(_value.payload)
                : undefined;
            this.simpleResponses = _value.simpleResponses
                ? new Intent.Message.SimpleResponses(_value.simpleResponses)
                : undefined;
            this.basicCard = _value.basicCard
                ? new Intent.Message.BasicCard(_value.basicCard)
                : undefined;
            this.suggestions = _value.suggestions
                ? new Intent.Message.Suggestions(_value.suggestions)
                : undefined;
            this.linkOutSuggestion = _value.linkOutSuggestion
                ? new Intent.Message.LinkOutSuggestion(_value.linkOutSuggestion)
                : undefined;
            this.listSelect = _value.listSelect
                ? new Intent.Message.ListSelect(_value.listSelect)
                : undefined;
            this.carouselSelect = _value.carouselSelect
                ? new Intent.Message.CarouselSelect(_value.carouselSelect)
                : undefined;
            this.htmlText = _value.htmlText
                ? new Intent.Message.HTMLText(_value.htmlText)
                : undefined;
            this.video = _value.video
                ? new Intent.Message.Video(_value.video)
                : undefined;
            this.audio = _value.audio
                ? new Intent.Message.Audio(_value.audio)
                : undefined;
            this.platform = _value.platform;
            Message.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new Message();
            Message.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.platform = _instance.platform || 0;
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.text = new Intent.Message.Text();
                        _reader.readMessage(_instance.text, Intent.Message.Text.deserializeBinaryFromReader);
                        break;
                    case 2:
                        _instance.image = new Intent.Message.Image();
                        _reader.readMessage(_instance.image, Intent.Message.Image.deserializeBinaryFromReader);
                        break;
                    case 3:
                        _instance.quickReplies = new Intent.Message.QuickReplies();
                        _reader.readMessage(_instance.quickReplies, Intent.Message.QuickReplies.deserializeBinaryFromReader);
                        break;
                    case 4:
                        _instance.card = new Intent.Message.Card();
                        _reader.readMessage(_instance.card, Intent.Message.Card.deserializeBinaryFromReader);
                        break;
                    case 5:
                        _instance.payload = new googleProtobuf010.Struct();
                        _reader.readMessage(_instance.payload, googleProtobuf010.Struct.deserializeBinaryFromReader);
                        break;
                    case 7:
                        _instance.simpleResponses = new Intent.Message.SimpleResponses();
                        _reader.readMessage(_instance.simpleResponses, Intent.Message.SimpleResponses.deserializeBinaryFromReader);
                        break;
                    case 8:
                        _instance.basicCard = new Intent.Message.BasicCard();
                        _reader.readMessage(_instance.basicCard, Intent.Message.BasicCard.deserializeBinaryFromReader);
                        break;
                    case 9:
                        _instance.suggestions = new Intent.Message.Suggestions();
                        _reader.readMessage(_instance.suggestions, Intent.Message.Suggestions.deserializeBinaryFromReader);
                        break;
                    case 10:
                        _instance.linkOutSuggestion = new Intent.Message.LinkOutSuggestion();
                        _reader.readMessage(_instance.linkOutSuggestion, Intent.Message.LinkOutSuggestion.deserializeBinaryFromReader);
                        break;
                    case 11:
                        _instance.listSelect = new Intent.Message.ListSelect();
                        _reader.readMessage(_instance.listSelect, Intent.Message.ListSelect.deserializeBinaryFromReader);
                        break;
                    case 12:
                        _instance.carouselSelect = new Intent.Message.CarouselSelect();
                        _reader.readMessage(_instance.carouselSelect, Intent.Message.CarouselSelect.deserializeBinaryFromReader);
                        break;
                    case 13:
                        _instance.htmlText = new Intent.Message.HTMLText();
                        _reader.readMessage(_instance.htmlText, Intent.Message.HTMLText.deserializeBinaryFromReader);
                        break;
                    case 14:
                        _instance.video = new Intent.Message.Video();
                        _reader.readMessage(_instance.video, Intent.Message.Video.deserializeBinaryFromReader);
                        break;
                    case 15:
                        _instance.audio = new Intent.Message.Audio();
                        _reader.readMessage(_instance.audio, Intent.Message.Audio.deserializeBinaryFromReader);
                        break;
                    case 6:
                        _instance.platform = _reader.readEnum();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            Message.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.text) {
                _writer.writeMessage(1, _instance.text, Intent.Message.Text.serializeBinaryToWriter);
            }
            if (_instance.image) {
                _writer.writeMessage(2, _instance.image, Intent.Message.Image.serializeBinaryToWriter);
            }
            if (_instance.quickReplies) {
                _writer.writeMessage(3, _instance.quickReplies, Intent.Message.QuickReplies.serializeBinaryToWriter);
            }
            if (_instance.card) {
                _writer.writeMessage(4, _instance.card, Intent.Message.Card.serializeBinaryToWriter);
            }
            if (_instance.payload) {
                _writer.writeMessage(5, _instance.payload, googleProtobuf010.Struct.serializeBinaryToWriter);
            }
            if (_instance.simpleResponses) {
                _writer.writeMessage(7, _instance.simpleResponses, Intent.Message.SimpleResponses.serializeBinaryToWriter);
            }
            if (_instance.basicCard) {
                _writer.writeMessage(8, _instance.basicCard, Intent.Message.BasicCard.serializeBinaryToWriter);
            }
            if (_instance.suggestions) {
                _writer.writeMessage(9, _instance.suggestions, Intent.Message.Suggestions.serializeBinaryToWriter);
            }
            if (_instance.linkOutSuggestion) {
                _writer.writeMessage(10, _instance.linkOutSuggestion, Intent.Message.LinkOutSuggestion.serializeBinaryToWriter);
            }
            if (_instance.listSelect) {
                _writer.writeMessage(11, _instance.listSelect, Intent.Message.ListSelect.serializeBinaryToWriter);
            }
            if (_instance.carouselSelect) {
                _writer.writeMessage(12, _instance.carouselSelect, Intent.Message.CarouselSelect.serializeBinaryToWriter);
            }
            if (_instance.htmlText) {
                _writer.writeMessage(13, _instance.htmlText, Intent.Message.HTMLText.serializeBinaryToWriter);
            }
            if (_instance.video) {
                _writer.writeMessage(14, _instance.video, Intent.Message.Video.serializeBinaryToWriter);
            }
            if (_instance.audio) {
                _writer.writeMessage(15, _instance.audio, Intent.Message.Audio.serializeBinaryToWriter);
            }
            if (_instance.platform) {
                _writer.writeEnum(6, _instance.platform);
            }
        }
        get text() {
            return this._text;
        }
        set text(value) {
            if (value !== undefined && value !== null) {
                this._image = this._quickReplies = this._card = this._payload = this._simpleResponses = this._basicCard = this._suggestions = this._linkOutSuggestion = this._listSelect = this._carouselSelect = this._htmlText = this._video = this._audio = undefined;
                this._message = Message.MessageCase.text;
            }
            this._text = value;
        }
        get image() {
            return this._image;
        }
        set image(value) {
            if (value !== undefined && value !== null) {
                this._text = this._quickReplies = this._card = this._payload = this._simpleResponses = this._basicCard = this._suggestions = this._linkOutSuggestion = this._listSelect = this._carouselSelect = this._htmlText = this._video = this._audio = undefined;
                this._message = Message.MessageCase.image;
            }
            this._image = value;
        }
        get quickReplies() {
            return this._quickReplies;
        }
        set quickReplies(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._card = this._payload = this._simpleResponses = this._basicCard = this._suggestions = this._linkOutSuggestion = this._listSelect = this._carouselSelect = this._htmlText = this._video = this._audio = undefined;
                this._message = Message.MessageCase.quickReplies;
            }
            this._quickReplies = value;
        }
        get card() {
            return this._card;
        }
        set card(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._quickReplies = this._payload = this._simpleResponses = this._basicCard = this._suggestions = this._linkOutSuggestion = this._listSelect = this._carouselSelect = this._htmlText = this._video = this._audio = undefined;
                this._message = Message.MessageCase.card;
            }
            this._card = value;
        }
        get payload() {
            return this._payload;
        }
        set payload(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._quickReplies = this._card = this._simpleResponses = this._basicCard = this._suggestions = this._linkOutSuggestion = this._listSelect = this._carouselSelect = this._htmlText = this._video = this._audio = undefined;
                this._message = Message.MessageCase.payload;
            }
            this._payload = value;
        }
        get simpleResponses() {
            return this._simpleResponses;
        }
        set simpleResponses(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._quickReplies = this._card = this._payload = this._basicCard = this._suggestions = this._linkOutSuggestion = this._listSelect = this._carouselSelect = this._htmlText = this._video = this._audio = undefined;
                this._message = Message.MessageCase.simpleResponses;
            }
            this._simpleResponses = value;
        }
        get basicCard() {
            return this._basicCard;
        }
        set basicCard(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._quickReplies = this._card = this._payload = this._simpleResponses = this._suggestions = this._linkOutSuggestion = this._listSelect = this._carouselSelect = this._htmlText = this._video = this._audio = undefined;
                this._message = Message.MessageCase.basicCard;
            }
            this._basicCard = value;
        }
        get suggestions() {
            return this._suggestions;
        }
        set suggestions(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._quickReplies = this._card = this._payload = this._simpleResponses = this._basicCard = this._linkOutSuggestion = this._listSelect = this._carouselSelect = this._htmlText = this._video = this._audio = undefined;
                this._message = Message.MessageCase.suggestions;
            }
            this._suggestions = value;
        }
        get linkOutSuggestion() {
            return this._linkOutSuggestion;
        }
        set linkOutSuggestion(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._quickReplies = this._card = this._payload = this._simpleResponses = this._basicCard = this._suggestions = this._listSelect = this._carouselSelect = this._htmlText = this._video = this._audio = undefined;
                this._message = Message.MessageCase.linkOutSuggestion;
            }
            this._linkOutSuggestion = value;
        }
        get listSelect() {
            return this._listSelect;
        }
        set listSelect(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._quickReplies = this._card = this._payload = this._simpleResponses = this._basicCard = this._suggestions = this._linkOutSuggestion = this._carouselSelect = this._htmlText = this._video = this._audio = undefined;
                this._message = Message.MessageCase.listSelect;
            }
            this._listSelect = value;
        }
        get carouselSelect() {
            return this._carouselSelect;
        }
        set carouselSelect(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._quickReplies = this._card = this._payload = this._simpleResponses = this._basicCard = this._suggestions = this._linkOutSuggestion = this._listSelect = this._htmlText = this._video = this._audio = undefined;
                this._message = Message.MessageCase.carouselSelect;
            }
            this._carouselSelect = value;
        }
        get htmlText() {
            return this._htmlText;
        }
        set htmlText(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._quickReplies = this._card = this._payload = this._simpleResponses = this._basicCard = this._suggestions = this._linkOutSuggestion = this._listSelect = this._carouselSelect = this._video = this._audio = undefined;
                this._message = Message.MessageCase.htmlText;
            }
            this._htmlText = value;
        }
        get video() {
            return this._video;
        }
        set video(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._quickReplies = this._card = this._payload = this._simpleResponses = this._basicCard = this._suggestions = this._linkOutSuggestion = this._listSelect = this._carouselSelect = this._htmlText = this._audio = undefined;
                this._message = Message.MessageCase.video;
            }
            this._video = value;
        }
        get audio() {
            return this._audio;
        }
        set audio(value) {
            if (value !== undefined && value !== null) {
                this._text = this._image = this._quickReplies = this._card = this._payload = this._simpleResponses = this._basicCard = this._suggestions = this._linkOutSuggestion = this._listSelect = this._carouselSelect = this._htmlText = this._video = undefined;
                this._message = Message.MessageCase.audio;
            }
            this._audio = value;
        }
        get platform() {
            return this._platform;
        }
        set platform(value) {
            this._platform = value;
        }
        get message() {
            return this._message;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            Message.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                text: this.text ? this.text.toObject() : undefined,
                image: this.image ? this.image.toObject() : undefined,
                quickReplies: this.quickReplies
                    ? this.quickReplies.toObject()
                    : undefined,
                card: this.card ? this.card.toObject() : undefined,
                payload: this.payload ? this.payload.toObject() : undefined,
                simpleResponses: this.simpleResponses
                    ? this.simpleResponses.toObject()
                    : undefined,
                basicCard: this.basicCard ? this.basicCard.toObject() : undefined,
                suggestions: this.suggestions ? this.suggestions.toObject() : undefined,
                linkOutSuggestion: this.linkOutSuggestion
                    ? this.linkOutSuggestion.toObject()
                    : undefined,
                listSelect: this.listSelect ? this.listSelect.toObject() : undefined,
                carouselSelect: this.carouselSelect
                    ? this.carouselSelect.toObject()
                    : undefined,
                htmlText: this.htmlText ? this.htmlText.toObject() : undefined,
                video: this.video ? this.video.toObject() : undefined,
                audio: this.audio ? this.audio.toObject() : undefined,
                platform: this.platform
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            var _a;
            return {
                text: this.text ? this.text.toProtobufJSON(options) : null,
                image: this.image ? this.image.toProtobufJSON(options) : null,
                quickReplies: this.quickReplies
                    ? this.quickReplies.toProtobufJSON(options)
                    : null,
                card: this.card ? this.card.toProtobufJSON(options) : null,
                payload: this.payload ? this.payload.toProtobufJSON(options) : null,
                simpleResponses: this.simpleResponses
                    ? this.simpleResponses.toProtobufJSON(options)
                    : null,
                basicCard: this.basicCard
                    ? this.basicCard.toProtobufJSON(options)
                    : null,
                suggestions: this.suggestions
                    ? this.suggestions.toProtobufJSON(options)
                    : null,
                linkOutSuggestion: this.linkOutSuggestion
                    ? this.linkOutSuggestion.toProtobufJSON(options)
                    : null,
                listSelect: this.listSelect
                    ? this.listSelect.toProtobufJSON(options)
                    : null,
                carouselSelect: this.carouselSelect
                    ? this.carouselSelect.toProtobufJSON(options)
                    : null,
                htmlText: this.htmlText ? this.htmlText.toProtobufJSON(options) : null,
                video: this.video ? this.video.toProtobufJSON(options) : null,
                audio: this.audio ? this.audio.toProtobufJSON(options) : null,
                platform: Intent.Message.Platform[(_a = this.platform) !== null && _a !== void 0 ? _a : 0]
            };
        }
    }
    Message.id = 'ondewo.nlu.Message';
    Intent.Message = Message;
    (function (Message) {
        let MessageCase;
        (function (MessageCase) {
            MessageCase[MessageCase["none"] = 0] = "none";
            MessageCase[MessageCase["text"] = 1] = "text";
            MessageCase[MessageCase["image"] = 2] = "image";
            MessageCase[MessageCase["quickReplies"] = 3] = "quickReplies";
            MessageCase[MessageCase["card"] = 4] = "card";
            MessageCase[MessageCase["payload"] = 5] = "payload";
            MessageCase[MessageCase["simpleResponses"] = 6] = "simpleResponses";
            MessageCase[MessageCase["basicCard"] = 7] = "basicCard";
            MessageCase[MessageCase["suggestions"] = 8] = "suggestions";
            MessageCase[MessageCase["linkOutSuggestion"] = 9] = "linkOutSuggestion";
            MessageCase[MessageCase["listSelect"] = 10] = "listSelect";
            MessageCase[MessageCase["carouselSelect"] = 11] = "carouselSelect";
            MessageCase[MessageCase["htmlText"] = 12] = "htmlText";
            MessageCase[MessageCase["video"] = 13] = "video";
            MessageCase[MessageCase["audio"] = 14] = "audio";
        })(MessageCase = Message.MessageCase || (Message.MessageCase = {}));
        let Platform;
        (function (Platform) {
            Platform[Platform["PLATFORM_UNSPECIFIED"] = 0] = "PLATFORM_UNSPECIFIED";
            Platform[Platform["FACEBOOK"] = 1] = "FACEBOOK";
            Platform[Platform["SLACK"] = 2] = "SLACK";
            Platform[Platform["TELEGRAM"] = 3] = "TELEGRAM";
            Platform[Platform["KIK"] = 4] = "KIK";
            Platform[Platform["SKYPE"] = 5] = "SKYPE";
            Platform[Platform["LINE"] = 6] = "LINE";
            Platform[Platform["VIBER"] = 7] = "VIBER";
            Platform[Platform["ACTIONS_ON_GOOGLE"] = 8] = "ACTIONS_ON_GOOGLE";
        })(Platform = Message.Platform || (Message.Platform = {}));
        /**
         * Message implementation for ondewo.nlu.Text
         */
        class Text {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of Text to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.text = (_value.text || []).slice();
                Text.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new Text();
                Text.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.text = _instance.text || [];
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            (_instance.text = _instance.text || []).push(_reader.readString());
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                Text.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.text && _instance.text.length) {
                    _writer.writeRepeatedString(1, _instance.text);
                }
            }
            get text() {
                return this._text;
            }
            set text(value) {
                this._text = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                Text.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    text: (this.text || []).slice()
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    text: (this.text || []).slice()
                };
            }
        }
        Text.id = 'ondewo.nlu.Text';
        Message.Text = Text;
        /**
         * Message implementation for ondewo.nlu.Image
         */
        class Image {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of Image to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.imageUri = _value.imageUri;
                this.accessibilityText = _value.accessibilityText;
                Image.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new Image();
                Image.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.imageUri = _instance.imageUri || '';
                _instance.accessibilityText = _instance.accessibilityText || '';
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.imageUri = _reader.readString();
                            break;
                        case 2:
                            _instance.accessibilityText = _reader.readString();
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                Image.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.imageUri) {
                    _writer.writeString(1, _instance.imageUri);
                }
                if (_instance.accessibilityText) {
                    _writer.writeString(2, _instance.accessibilityText);
                }
            }
            get imageUri() {
                return this._imageUri;
            }
            set imageUri(value) {
                this._imageUri = value;
            }
            get accessibilityText() {
                return this._accessibilityText;
            }
            set accessibilityText(value) {
                this._accessibilityText = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                Image.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    imageUri: this.imageUri,
                    accessibilityText: this.accessibilityText
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    imageUri: this.imageUri,
                    accessibilityText: this.accessibilityText
                };
            }
        }
        Image.id = 'ondewo.nlu.Image';
        Message.Image = Image;
        /**
         * Message implementation for ondewo.nlu.QuickReplies
         */
        class QuickReplies {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of QuickReplies to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.title = _value.title;
                this.quickReplies = (_value.quickReplies || []).slice();
                QuickReplies.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new QuickReplies();
                QuickReplies.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.title = _instance.title || '';
                _instance.quickReplies = _instance.quickReplies || [];
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.title = _reader.readString();
                            break;
                        case 2:
                            (_instance.quickReplies = _instance.quickReplies || []).push(_reader.readString());
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                QuickReplies.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.title) {
                    _writer.writeString(1, _instance.title);
                }
                if (_instance.quickReplies && _instance.quickReplies.length) {
                    _writer.writeRepeatedString(2, _instance.quickReplies);
                }
            }
            get title() {
                return this._title;
            }
            set title(value) {
                this._title = value;
            }
            get quickReplies() {
                return this._quickReplies;
            }
            set quickReplies(value) {
                this._quickReplies = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                QuickReplies.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    title: this.title,
                    quickReplies: (this.quickReplies || []).slice()
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    title: this.title,
                    quickReplies: (this.quickReplies || []).slice()
                };
            }
        }
        QuickReplies.id = 'ondewo.nlu.QuickReplies';
        Message.QuickReplies = QuickReplies;
        /**
         * Message implementation for ondewo.nlu.Card
         */
        class Card {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of Card to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.title = _value.title;
                this.subtitle = _value.subtitle;
                this.imageUri = _value.imageUri;
                this.buttons = (_value.buttons || []).map(m => new Intent.Message.Card.Button(m));
                Card.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new Card();
                Card.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.title = _instance.title || '';
                _instance.subtitle = _instance.subtitle || '';
                _instance.imageUri = _instance.imageUri || '';
                _instance.buttons = _instance.buttons || [];
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.title = _reader.readString();
                            break;
                        case 2:
                            _instance.subtitle = _reader.readString();
                            break;
                        case 3:
                            _instance.imageUri = _reader.readString();
                            break;
                        case 4:
                            const messageInitializer4 = new Intent.Message.Card.Button();
                            _reader.readMessage(messageInitializer4, Intent.Message.Card.Button.deserializeBinaryFromReader);
                            (_instance.buttons = _instance.buttons || []).push(messageInitializer4);
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                Card.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.title) {
                    _writer.writeString(1, _instance.title);
                }
                if (_instance.subtitle) {
                    _writer.writeString(2, _instance.subtitle);
                }
                if (_instance.imageUri) {
                    _writer.writeString(3, _instance.imageUri);
                }
                if (_instance.buttons && _instance.buttons.length) {
                    _writer.writeRepeatedMessage(4, _instance.buttons, Intent.Message.Card.Button.serializeBinaryToWriter);
                }
            }
            get title() {
                return this._title;
            }
            set title(value) {
                this._title = value;
            }
            get subtitle() {
                return this._subtitle;
            }
            set subtitle(value) {
                this._subtitle = value;
            }
            get imageUri() {
                return this._imageUri;
            }
            set imageUri(value) {
                this._imageUri = value;
            }
            get buttons() {
                return this._buttons;
            }
            set buttons(value) {
                this._buttons = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                Card.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    title: this.title,
                    subtitle: this.subtitle,
                    imageUri: this.imageUri,
                    buttons: (this.buttons || []).map(m => m.toObject())
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    title: this.title,
                    subtitle: this.subtitle,
                    imageUri: this.imageUri,
                    buttons: (this.buttons || []).map(m => m.toProtobufJSON(options))
                };
            }
        }
        Card.id = 'ondewo.nlu.Card';
        Message.Card = Card;
        (function (Card) {
            /**
             * Message implementation for ondewo.nlu.Button
             */
            class Button {
                /**
                 * Message constructor. Initializes the properties and applies default Protobuf values if necessary
                 * @param _value initial values object or instance of Button to deeply clone from
                 */
                constructor(_value) {
                    _value = _value || {};
                    this.text = _value.text;
                    this.postback = _value.postback;
                    Button.refineValues(this);
                }
                /**
                 * Deserialize binary data to message
                 * @param instance message instance
                 */
                static deserializeBinary(bytes) {
                    const instance = new Button();
                    Button.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                    return instance;
                }
                /**
                 * Check all the properties and set default protobuf values if necessary
                 * @param _instance message instance
                 */
                static refineValues(_instance) {
                    _instance.text = _instance.text || '';
                    _instance.postback = _instance.postback || '';
                }
                /**
                 * Deserializes / reads binary message into message instance using provided binary reader
                 * @param _instance message instance
                 * @param _reader binary reader instance
                 */
                static deserializeBinaryFromReader(_instance, _reader) {
                    while (_reader.nextField()) {
                        if (_reader.isEndGroup())
                            break;
                        switch (_reader.getFieldNumber()) {
                            case 1:
                                _instance.text = _reader.readString();
                                break;
                            case 2:
                                _instance.postback = _reader.readString();
                                break;
                            default:
                                _reader.skipField();
                        }
                    }
                    Button.refineValues(_instance);
                }
                /**
                 * Serializes a message to binary format using provided binary reader
                 * @param _instance message instance
                 * @param _writer binary writer instance
                 */
                static serializeBinaryToWriter(_instance, _writer) {
                    if (_instance.text) {
                        _writer.writeString(1, _instance.text);
                    }
                    if (_instance.postback) {
                        _writer.writeString(2, _instance.postback);
                    }
                }
                get text() {
                    return this._text;
                }
                set text(value) {
                    this._text = value;
                }
                get postback() {
                    return this._postback;
                }
                set postback(value) {
                    this._postback = value;
                }
                /**
                 * Serialize message to binary data
                 * @param instance message instance
                 */
                serializeBinary() {
                    const writer = new BinaryWriter();
                    Button.serializeBinaryToWriter(this, writer);
                    return writer.getResultBuffer();
                }
                /**
                 * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
                 */
                toObject() {
                    return {
                        text: this.text,
                        postback: this.postback
                    };
                }
                /**
                 * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
                 */
                toJSON() {
                    return this.toObject();
                }
                /**
                 * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
                 * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
                 * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
                 */
                toProtobufJSON(
                // @ts-ignore
                options) {
                    return {
                        text: this.text,
                        postback: this.postback
                    };
                }
            }
            Button.id = 'ondewo.nlu.Button';
            Card.Button = Button;
        })(Card = Message.Card || (Message.Card = {}));
        /**
         * Message implementation for ondewo.nlu.SimpleResponse
         */
        class SimpleResponse {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of SimpleResponse to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.textToSpeech = _value.textToSpeech;
                this.ssml = _value.ssml;
                this.displayText = _value.displayText;
                SimpleResponse.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new SimpleResponse();
                SimpleResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.textToSpeech = _instance.textToSpeech || '';
                _instance.ssml = _instance.ssml || '';
                _instance.displayText = _instance.displayText || '';
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.textToSpeech = _reader.readString();
                            break;
                        case 2:
                            _instance.ssml = _reader.readString();
                            break;
                        case 3:
                            _instance.displayText = _reader.readString();
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                SimpleResponse.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.textToSpeech) {
                    _writer.writeString(1, _instance.textToSpeech);
                }
                if (_instance.ssml) {
                    _writer.writeString(2, _instance.ssml);
                }
                if (_instance.displayText) {
                    _writer.writeString(3, _instance.displayText);
                }
            }
            get textToSpeech() {
                return this._textToSpeech;
            }
            set textToSpeech(value) {
                this._textToSpeech = value;
            }
            get ssml() {
                return this._ssml;
            }
            set ssml(value) {
                this._ssml = value;
            }
            get displayText() {
                return this._displayText;
            }
            set displayText(value) {
                this._displayText = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                SimpleResponse.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    textToSpeech: this.textToSpeech,
                    ssml: this.ssml,
                    displayText: this.displayText
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    textToSpeech: this.textToSpeech,
                    ssml: this.ssml,
                    displayText: this.displayText
                };
            }
        }
        SimpleResponse.id = 'ondewo.nlu.SimpleResponse';
        Message.SimpleResponse = SimpleResponse;
        /**
         * Message implementation for ondewo.nlu.SimpleResponses
         */
        class SimpleResponses {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of SimpleResponses to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.simpleResponses = (_value.simpleResponses || []).map(m => new Intent.Message.SimpleResponse(m));
                SimpleResponses.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new SimpleResponses();
                SimpleResponses.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.simpleResponses = _instance.simpleResponses || [];
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            const messageInitializer1 = new Intent.Message.SimpleResponse();
                            _reader.readMessage(messageInitializer1, Intent.Message.SimpleResponse.deserializeBinaryFromReader);
                            (_instance.simpleResponses =
                                _instance.simpleResponses || []).push(messageInitializer1);
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                SimpleResponses.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.simpleResponses && _instance.simpleResponses.length) {
                    _writer.writeRepeatedMessage(1, _instance.simpleResponses, Intent.Message.SimpleResponse.serializeBinaryToWriter);
                }
            }
            get simpleResponses() {
                return this._simpleResponses;
            }
            set simpleResponses(value) {
                this._simpleResponses = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                SimpleResponses.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    simpleResponses: (this.simpleResponses || []).map(m => m.toObject())
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    simpleResponses: (this.simpleResponses || []).map(m => m.toProtobufJSON(options))
                };
            }
        }
        SimpleResponses.id = 'ondewo.nlu.SimpleResponses';
        Message.SimpleResponses = SimpleResponses;
        /**
         * Message implementation for ondewo.nlu.BasicCard
         */
        class BasicCard {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of BasicCard to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.title = _value.title;
                this.subtitle = _value.subtitle;
                this.formattedText = _value.formattedText;
                this.image = _value.image
                    ? new Intent.Message.Image(_value.image)
                    : undefined;
                this.buttons = (_value.buttons || []).map(m => new Intent.Message.BasicCard.Button(m));
                BasicCard.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new BasicCard();
                BasicCard.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.title = _instance.title || '';
                _instance.subtitle = _instance.subtitle || '';
                _instance.formattedText = _instance.formattedText || '';
                _instance.image = _instance.image || undefined;
                _instance.buttons = _instance.buttons || [];
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.title = _reader.readString();
                            break;
                        case 2:
                            _instance.subtitle = _reader.readString();
                            break;
                        case 3:
                            _instance.formattedText = _reader.readString();
                            break;
                        case 4:
                            _instance.image = new Intent.Message.Image();
                            _reader.readMessage(_instance.image, Intent.Message.Image.deserializeBinaryFromReader);
                            break;
                        case 5:
                            const messageInitializer5 = new Intent.Message.BasicCard.Button();
                            _reader.readMessage(messageInitializer5, Intent.Message.BasicCard.Button.deserializeBinaryFromReader);
                            (_instance.buttons = _instance.buttons || []).push(messageInitializer5);
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                BasicCard.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.title) {
                    _writer.writeString(1, _instance.title);
                }
                if (_instance.subtitle) {
                    _writer.writeString(2, _instance.subtitle);
                }
                if (_instance.formattedText) {
                    _writer.writeString(3, _instance.formattedText);
                }
                if (_instance.image) {
                    _writer.writeMessage(4, _instance.image, Intent.Message.Image.serializeBinaryToWriter);
                }
                if (_instance.buttons && _instance.buttons.length) {
                    _writer.writeRepeatedMessage(5, _instance.buttons, Intent.Message.BasicCard.Button.serializeBinaryToWriter);
                }
            }
            get title() {
                return this._title;
            }
            set title(value) {
                this._title = value;
            }
            get subtitle() {
                return this._subtitle;
            }
            set subtitle(value) {
                this._subtitle = value;
            }
            get formattedText() {
                return this._formattedText;
            }
            set formattedText(value) {
                this._formattedText = value;
            }
            get image() {
                return this._image;
            }
            set image(value) {
                this._image = value;
            }
            get buttons() {
                return this._buttons;
            }
            set buttons(value) {
                this._buttons = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                BasicCard.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    title: this.title,
                    subtitle: this.subtitle,
                    formattedText: this.formattedText,
                    image: this.image ? this.image.toObject() : undefined,
                    buttons: (this.buttons || []).map(m => m.toObject())
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    title: this.title,
                    subtitle: this.subtitle,
                    formattedText: this.formattedText,
                    image: this.image ? this.image.toProtobufJSON(options) : null,
                    buttons: (this.buttons || []).map(m => m.toProtobufJSON(options))
                };
            }
        }
        BasicCard.id = 'ondewo.nlu.BasicCard';
        Message.BasicCard = BasicCard;
        (function (BasicCard) {
            /**
             * Message implementation for ondewo.nlu.Button
             */
            class Button {
                /**
                 * Message constructor. Initializes the properties and applies default Protobuf values if necessary
                 * @param _value initial values object or instance of Button to deeply clone from
                 */
                constructor(_value) {
                    _value = _value || {};
                    this.title = _value.title;
                    this.openUriAction = _value.openUriAction
                        ? new Intent.Message.BasicCard.Button.OpenUriAction(_value.openUriAction)
                        : undefined;
                    Button.refineValues(this);
                }
                /**
                 * Deserialize binary data to message
                 * @param instance message instance
                 */
                static deserializeBinary(bytes) {
                    const instance = new Button();
                    Button.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                    return instance;
                }
                /**
                 * Check all the properties and set default protobuf values if necessary
                 * @param _instance message instance
                 */
                static refineValues(_instance) {
                    _instance.title = _instance.title || '';
                    _instance.openUriAction = _instance.openUriAction || undefined;
                }
                /**
                 * Deserializes / reads binary message into message instance using provided binary reader
                 * @param _instance message instance
                 * @param _reader binary reader instance
                 */
                static deserializeBinaryFromReader(_instance, _reader) {
                    while (_reader.nextField()) {
                        if (_reader.isEndGroup())
                            break;
                        switch (_reader.getFieldNumber()) {
                            case 1:
                                _instance.title = _reader.readString();
                                break;
                            case 2:
                                _instance.openUriAction = new Intent.Message.BasicCard.Button.OpenUriAction();
                                _reader.readMessage(_instance.openUriAction, Intent.Message.BasicCard.Button.OpenUriAction
                                    .deserializeBinaryFromReader);
                                break;
                            default:
                                _reader.skipField();
                        }
                    }
                    Button.refineValues(_instance);
                }
                /**
                 * Serializes a message to binary format using provided binary reader
                 * @param _instance message instance
                 * @param _writer binary writer instance
                 */
                static serializeBinaryToWriter(_instance, _writer) {
                    if (_instance.title) {
                        _writer.writeString(1, _instance.title);
                    }
                    if (_instance.openUriAction) {
                        _writer.writeMessage(2, _instance.openUriAction, Intent.Message.BasicCard.Button.OpenUriAction
                            .serializeBinaryToWriter);
                    }
                }
                get title() {
                    return this._title;
                }
                set title(value) {
                    this._title = value;
                }
                get openUriAction() {
                    return this._openUriAction;
                }
                set openUriAction(value) {
                    this._openUriAction = value;
                }
                /**
                 * Serialize message to binary data
                 * @param instance message instance
                 */
                serializeBinary() {
                    const writer = new BinaryWriter();
                    Button.serializeBinaryToWriter(this, writer);
                    return writer.getResultBuffer();
                }
                /**
                 * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
                 */
                toObject() {
                    return {
                        title: this.title,
                        openUriAction: this.openUriAction
                            ? this.openUriAction.toObject()
                            : undefined
                    };
                }
                /**
                 * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
                 */
                toJSON() {
                    return this.toObject();
                }
                /**
                 * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
                 * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
                 * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
                 */
                toProtobufJSON(
                // @ts-ignore
                options) {
                    return {
                        title: this.title,
                        openUriAction: this.openUriAction
                            ? this.openUriAction.toProtobufJSON(options)
                            : null
                    };
                }
            }
            Button.id = 'ondewo.nlu.Button';
            BasicCard.Button = Button;
            (function (Button) {
                /**
                 * Message implementation for ondewo.nlu.OpenUriAction
                 */
                class OpenUriAction {
                    /**
                     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
                     * @param _value initial values object or instance of OpenUriAction to deeply clone from
                     */
                    constructor(_value) {
                        _value = _value || {};
                        this.uri = _value.uri;
                        OpenUriAction.refineValues(this);
                    }
                    /**
                     * Deserialize binary data to message
                     * @param instance message instance
                     */
                    static deserializeBinary(bytes) {
                        const instance = new OpenUriAction();
                        OpenUriAction.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                        return instance;
                    }
                    /**
                     * Check all the properties and set default protobuf values if necessary
                     * @param _instance message instance
                     */
                    static refineValues(_instance) {
                        _instance.uri = _instance.uri || '';
                    }
                    /**
                     * Deserializes / reads binary message into message instance using provided binary reader
                     * @param _instance message instance
                     * @param _reader binary reader instance
                     */
                    static deserializeBinaryFromReader(_instance, _reader) {
                        while (_reader.nextField()) {
                            if (_reader.isEndGroup())
                                break;
                            switch (_reader.getFieldNumber()) {
                                case 1:
                                    _instance.uri = _reader.readString();
                                    break;
                                default:
                                    _reader.skipField();
                            }
                        }
                        OpenUriAction.refineValues(_instance);
                    }
                    /**
                     * Serializes a message to binary format using provided binary reader
                     * @param _instance message instance
                     * @param _writer binary writer instance
                     */
                    static serializeBinaryToWriter(_instance, _writer) {
                        if (_instance.uri) {
                            _writer.writeString(1, _instance.uri);
                        }
                    }
                    get uri() {
                        return this._uri;
                    }
                    set uri(value) {
                        this._uri = value;
                    }
                    /**
                     * Serialize message to binary data
                     * @param instance message instance
                     */
                    serializeBinary() {
                        const writer = new BinaryWriter();
                        OpenUriAction.serializeBinaryToWriter(this, writer);
                        return writer.getResultBuffer();
                    }
                    /**
                     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
                     */
                    toObject() {
                        return {
                            uri: this.uri
                        };
                    }
                    /**
                     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
                     */
                    toJSON() {
                        return this.toObject();
                    }
                    /**
                     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
                     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
                     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
                     */
                    toProtobufJSON(
                    // @ts-ignore
                    options) {
                        return {
                            uri: this.uri
                        };
                    }
                }
                OpenUriAction.id = 'ondewo.nlu.OpenUriAction';
                Button.OpenUriAction = OpenUriAction;
            })(Button = BasicCard.Button || (BasicCard.Button = {}));
        })(BasicCard = Message.BasicCard || (Message.BasicCard = {}));
        /**
         * Message implementation for ondewo.nlu.Suggestion
         */
        class Suggestion {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of Suggestion to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.title = _value.title;
                Suggestion.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new Suggestion();
                Suggestion.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.title = _instance.title || '';
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.title = _reader.readString();
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                Suggestion.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.title) {
                    _writer.writeString(1, _instance.title);
                }
            }
            get title() {
                return this._title;
            }
            set title(value) {
                this._title = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                Suggestion.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    title: this.title
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    title: this.title
                };
            }
        }
        Suggestion.id = 'ondewo.nlu.Suggestion';
        Message.Suggestion = Suggestion;
        /**
         * Message implementation for ondewo.nlu.Suggestions
         */
        class Suggestions {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of Suggestions to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.suggestions = (_value.suggestions || []).map(m => new Intent.Message.Suggestion(m));
                Suggestions.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new Suggestions();
                Suggestions.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.suggestions = _instance.suggestions || [];
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            const messageInitializer1 = new Intent.Message.Suggestion();
                            _reader.readMessage(messageInitializer1, Intent.Message.Suggestion.deserializeBinaryFromReader);
                            (_instance.suggestions = _instance.suggestions || []).push(messageInitializer1);
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                Suggestions.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.suggestions && _instance.suggestions.length) {
                    _writer.writeRepeatedMessage(1, _instance.suggestions, Intent.Message.Suggestion.serializeBinaryToWriter);
                }
            }
            get suggestions() {
                return this._suggestions;
            }
            set suggestions(value) {
                this._suggestions = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                Suggestions.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    suggestions: (this.suggestions || []).map(m => m.toObject())
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    suggestions: (this.suggestions || []).map(m => m.toProtobufJSON(options))
                };
            }
        }
        Suggestions.id = 'ondewo.nlu.Suggestions';
        Message.Suggestions = Suggestions;
        /**
         * Message implementation for ondewo.nlu.LinkOutSuggestion
         */
        class LinkOutSuggestion {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of LinkOutSuggestion to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.destinationName = _value.destinationName;
                this.uri = _value.uri;
                LinkOutSuggestion.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new LinkOutSuggestion();
                LinkOutSuggestion.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.destinationName = _instance.destinationName || '';
                _instance.uri = _instance.uri || '';
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.destinationName = _reader.readString();
                            break;
                        case 2:
                            _instance.uri = _reader.readString();
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                LinkOutSuggestion.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.destinationName) {
                    _writer.writeString(1, _instance.destinationName);
                }
                if (_instance.uri) {
                    _writer.writeString(2, _instance.uri);
                }
            }
            get destinationName() {
                return this._destinationName;
            }
            set destinationName(value) {
                this._destinationName = value;
            }
            get uri() {
                return this._uri;
            }
            set uri(value) {
                this._uri = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                LinkOutSuggestion.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    destinationName: this.destinationName,
                    uri: this.uri
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    destinationName: this.destinationName,
                    uri: this.uri
                };
            }
        }
        LinkOutSuggestion.id = 'ondewo.nlu.LinkOutSuggestion';
        Message.LinkOutSuggestion = LinkOutSuggestion;
        /**
         * Message implementation for ondewo.nlu.ListSelect
         */
        class ListSelect {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of ListSelect to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.title = _value.title;
                this.items = (_value.items || []).map(m => new Intent.Message.ListSelect.Item(m));
                ListSelect.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new ListSelect();
                ListSelect.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.title = _instance.title || '';
                _instance.items = _instance.items || [];
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.title = _reader.readString();
                            break;
                        case 2:
                            const messageInitializer2 = new Intent.Message.ListSelect.Item();
                            _reader.readMessage(messageInitializer2, Intent.Message.ListSelect.Item.deserializeBinaryFromReader);
                            (_instance.items = _instance.items || []).push(messageInitializer2);
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                ListSelect.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.title) {
                    _writer.writeString(1, _instance.title);
                }
                if (_instance.items && _instance.items.length) {
                    _writer.writeRepeatedMessage(2, _instance.items, Intent.Message.ListSelect.Item.serializeBinaryToWriter);
                }
            }
            get title() {
                return this._title;
            }
            set title(value) {
                this._title = value;
            }
            get items() {
                return this._items;
            }
            set items(value) {
                this._items = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                ListSelect.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    title: this.title,
                    items: (this.items || []).map(m => m.toObject())
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    title: this.title,
                    items: (this.items || []).map(m => m.toProtobufJSON(options))
                };
            }
        }
        ListSelect.id = 'ondewo.nlu.ListSelect';
        Message.ListSelect = ListSelect;
        (function (ListSelect) {
            /**
             * Message implementation for ondewo.nlu.Item
             */
            class Item {
                /**
                 * Message constructor. Initializes the properties and applies default Protobuf values if necessary
                 * @param _value initial values object or instance of Item to deeply clone from
                 */
                constructor(_value) {
                    _value = _value || {};
                    this.info = _value.info
                        ? new Intent.Message.SelectItemInfo(_value.info)
                        : undefined;
                    this.title = _value.title;
                    this.description = _value.description;
                    this.image = _value.image
                        ? new Intent.Message.Image(_value.image)
                        : undefined;
                    Item.refineValues(this);
                }
                /**
                 * Deserialize binary data to message
                 * @param instance message instance
                 */
                static deserializeBinary(bytes) {
                    const instance = new Item();
                    Item.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                    return instance;
                }
                /**
                 * Check all the properties and set default protobuf values if necessary
                 * @param _instance message instance
                 */
                static refineValues(_instance) {
                    _instance.info = _instance.info || undefined;
                    _instance.title = _instance.title || '';
                    _instance.description = _instance.description || '';
                    _instance.image = _instance.image || undefined;
                }
                /**
                 * Deserializes / reads binary message into message instance using provided binary reader
                 * @param _instance message instance
                 * @param _reader binary reader instance
                 */
                static deserializeBinaryFromReader(_instance, _reader) {
                    while (_reader.nextField()) {
                        if (_reader.isEndGroup())
                            break;
                        switch (_reader.getFieldNumber()) {
                            case 1:
                                _instance.info = new Intent.Message.SelectItemInfo();
                                _reader.readMessage(_instance.info, Intent.Message.SelectItemInfo.deserializeBinaryFromReader);
                                break;
                            case 2:
                                _instance.title = _reader.readString();
                                break;
                            case 3:
                                _instance.description = _reader.readString();
                                break;
                            case 4:
                                _instance.image = new Intent.Message.Image();
                                _reader.readMessage(_instance.image, Intent.Message.Image.deserializeBinaryFromReader);
                                break;
                            default:
                                _reader.skipField();
                        }
                    }
                    Item.refineValues(_instance);
                }
                /**
                 * Serializes a message to binary format using provided binary reader
                 * @param _instance message instance
                 * @param _writer binary writer instance
                 */
                static serializeBinaryToWriter(_instance, _writer) {
                    if (_instance.info) {
                        _writer.writeMessage(1, _instance.info, Intent.Message.SelectItemInfo.serializeBinaryToWriter);
                    }
                    if (_instance.title) {
                        _writer.writeString(2, _instance.title);
                    }
                    if (_instance.description) {
                        _writer.writeString(3, _instance.description);
                    }
                    if (_instance.image) {
                        _writer.writeMessage(4, _instance.image, Intent.Message.Image.serializeBinaryToWriter);
                    }
                }
                get info() {
                    return this._info;
                }
                set info(value) {
                    this._info = value;
                }
                get title() {
                    return this._title;
                }
                set title(value) {
                    this._title = value;
                }
                get description() {
                    return this._description;
                }
                set description(value) {
                    this._description = value;
                }
                get image() {
                    return this._image;
                }
                set image(value) {
                    this._image = value;
                }
                /**
                 * Serialize message to binary data
                 * @param instance message instance
                 */
                serializeBinary() {
                    const writer = new BinaryWriter();
                    Item.serializeBinaryToWriter(this, writer);
                    return writer.getResultBuffer();
                }
                /**
                 * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
                 */
                toObject() {
                    return {
                        info: this.info ? this.info.toObject() : undefined,
                        title: this.title,
                        description: this.description,
                        image: this.image ? this.image.toObject() : undefined
                    };
                }
                /**
                 * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
                 */
                toJSON() {
                    return this.toObject();
                }
                /**
                 * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
                 * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
                 * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
                 */
                toProtobufJSON(
                // @ts-ignore
                options) {
                    return {
                        info: this.info ? this.info.toProtobufJSON(options) : null,
                        title: this.title,
                        description: this.description,
                        image: this.image ? this.image.toProtobufJSON(options) : null
                    };
                }
            }
            Item.id = 'ondewo.nlu.Item';
            ListSelect.Item = Item;
        })(ListSelect = Message.ListSelect || (Message.ListSelect = {}));
        /**
         * Message implementation for ondewo.nlu.CarouselSelect
         */
        class CarouselSelect {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of CarouselSelect to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.items = (_value.items || []).map(m => new Intent.Message.CarouselSelect.Item(m));
                CarouselSelect.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new CarouselSelect();
                CarouselSelect.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.items = _instance.items || [];
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            const messageInitializer1 = new Intent.Message.CarouselSelect.Item();
                            _reader.readMessage(messageInitializer1, Intent.Message.CarouselSelect.Item.deserializeBinaryFromReader);
                            (_instance.items = _instance.items || []).push(messageInitializer1);
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                CarouselSelect.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.items && _instance.items.length) {
                    _writer.writeRepeatedMessage(1, _instance.items, Intent.Message.CarouselSelect.Item.serializeBinaryToWriter);
                }
            }
            get items() {
                return this._items;
            }
            set items(value) {
                this._items = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                CarouselSelect.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    items: (this.items || []).map(m => m.toObject())
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    items: (this.items || []).map(m => m.toProtobufJSON(options))
                };
            }
        }
        CarouselSelect.id = 'ondewo.nlu.CarouselSelect';
        Message.CarouselSelect = CarouselSelect;
        (function (CarouselSelect) {
            /**
             * Message implementation for ondewo.nlu.Item
             */
            class Item {
                /**
                 * Message constructor. Initializes the properties and applies default Protobuf values if necessary
                 * @param _value initial values object or instance of Item to deeply clone from
                 */
                constructor(_value) {
                    _value = _value || {};
                    this.info = _value.info
                        ? new Intent.Message.SelectItemInfo(_value.info)
                        : undefined;
                    this.title = _value.title;
                    this.description = _value.description;
                    this.image = _value.image
                        ? new Intent.Message.Image(_value.image)
                        : undefined;
                    Item.refineValues(this);
                }
                /**
                 * Deserialize binary data to message
                 * @param instance message instance
                 */
                static deserializeBinary(bytes) {
                    const instance = new Item();
                    Item.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                    return instance;
                }
                /**
                 * Check all the properties and set default protobuf values if necessary
                 * @param _instance message instance
                 */
                static refineValues(_instance) {
                    _instance.info = _instance.info || undefined;
                    _instance.title = _instance.title || '';
                    _instance.description = _instance.description || '';
                    _instance.image = _instance.image || undefined;
                }
                /**
                 * Deserializes / reads binary message into message instance using provided binary reader
                 * @param _instance message instance
                 * @param _reader binary reader instance
                 */
                static deserializeBinaryFromReader(_instance, _reader) {
                    while (_reader.nextField()) {
                        if (_reader.isEndGroup())
                            break;
                        switch (_reader.getFieldNumber()) {
                            case 1:
                                _instance.info = new Intent.Message.SelectItemInfo();
                                _reader.readMessage(_instance.info, Intent.Message.SelectItemInfo.deserializeBinaryFromReader);
                                break;
                            case 2:
                                _instance.title = _reader.readString();
                                break;
                            case 3:
                                _instance.description = _reader.readString();
                                break;
                            case 4:
                                _instance.image = new Intent.Message.Image();
                                _reader.readMessage(_instance.image, Intent.Message.Image.deserializeBinaryFromReader);
                                break;
                            default:
                                _reader.skipField();
                        }
                    }
                    Item.refineValues(_instance);
                }
                /**
                 * Serializes a message to binary format using provided binary reader
                 * @param _instance message instance
                 * @param _writer binary writer instance
                 */
                static serializeBinaryToWriter(_instance, _writer) {
                    if (_instance.info) {
                        _writer.writeMessage(1, _instance.info, Intent.Message.SelectItemInfo.serializeBinaryToWriter);
                    }
                    if (_instance.title) {
                        _writer.writeString(2, _instance.title);
                    }
                    if (_instance.description) {
                        _writer.writeString(3, _instance.description);
                    }
                    if (_instance.image) {
                        _writer.writeMessage(4, _instance.image, Intent.Message.Image.serializeBinaryToWriter);
                    }
                }
                get info() {
                    return this._info;
                }
                set info(value) {
                    this._info = value;
                }
                get title() {
                    return this._title;
                }
                set title(value) {
                    this._title = value;
                }
                get description() {
                    return this._description;
                }
                set description(value) {
                    this._description = value;
                }
                get image() {
                    return this._image;
                }
                set image(value) {
                    this._image = value;
                }
                /**
                 * Serialize message to binary data
                 * @param instance message instance
                 */
                serializeBinary() {
                    const writer = new BinaryWriter();
                    Item.serializeBinaryToWriter(this, writer);
                    return writer.getResultBuffer();
                }
                /**
                 * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
                 */
                toObject() {
                    return {
                        info: this.info ? this.info.toObject() : undefined,
                        title: this.title,
                        description: this.description,
                        image: this.image ? this.image.toObject() : undefined
                    };
                }
                /**
                 * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
                 */
                toJSON() {
                    return this.toObject();
                }
                /**
                 * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
                 * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
                 * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
                 */
                toProtobufJSON(
                // @ts-ignore
                options) {
                    return {
                        info: this.info ? this.info.toProtobufJSON(options) : null,
                        title: this.title,
                        description: this.description,
                        image: this.image ? this.image.toProtobufJSON(options) : null
                    };
                }
            }
            Item.id = 'ondewo.nlu.Item';
            CarouselSelect.Item = Item;
        })(CarouselSelect = Message.CarouselSelect || (Message.CarouselSelect = {}));
        /**
         * Message implementation for ondewo.nlu.HTMLText
         */
        class HTMLText {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of HTMLText to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.text = (_value.text || []).slice();
                HTMLText.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new HTMLText();
                HTMLText.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.text = _instance.text || [];
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            (_instance.text = _instance.text || []).push(_reader.readString());
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                HTMLText.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.text && _instance.text.length) {
                    _writer.writeRepeatedString(1, _instance.text);
                }
            }
            get text() {
                return this._text;
            }
            set text(value) {
                this._text = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                HTMLText.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    text: (this.text || []).slice()
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    text: (this.text || []).slice()
                };
            }
        }
        HTMLText.id = 'ondewo.nlu.HTMLText';
        Message.HTMLText = HTMLText;
        /**
         * Message implementation for ondewo.nlu.Video
         */
        class Video {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of Video to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.uri = _value.uri;
                this.accessibilityText = _value.accessibilityText;
                Video.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new Video();
                Video.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.uri = _instance.uri || '';
                _instance.accessibilityText = _instance.accessibilityText || '';
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.uri = _reader.readString();
                            break;
                        case 2:
                            _instance.accessibilityText = _reader.readString();
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                Video.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.uri) {
                    _writer.writeString(1, _instance.uri);
                }
                if (_instance.accessibilityText) {
                    _writer.writeString(2, _instance.accessibilityText);
                }
            }
            get uri() {
                return this._uri;
            }
            set uri(value) {
                this._uri = value;
            }
            get accessibilityText() {
                return this._accessibilityText;
            }
            set accessibilityText(value) {
                this._accessibilityText = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                Video.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    uri: this.uri,
                    accessibilityText: this.accessibilityText
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    uri: this.uri,
                    accessibilityText: this.accessibilityText
                };
            }
        }
        Video.id = 'ondewo.nlu.Video';
        Message.Video = Video;
        /**
         * Message implementation for ondewo.nlu.Audio
         */
        class Audio {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of Audio to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.uri = _value.uri;
                this.accessibilityText = _value.accessibilityText;
                Audio.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new Audio();
                Audio.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.uri = _instance.uri || '';
                _instance.accessibilityText = _instance.accessibilityText || '';
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.uri = _reader.readString();
                            break;
                        case 2:
                            _instance.accessibilityText = _reader.readString();
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                Audio.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.uri) {
                    _writer.writeString(1, _instance.uri);
                }
                if (_instance.accessibilityText) {
                    _writer.writeString(2, _instance.accessibilityText);
                }
            }
            get uri() {
                return this._uri;
            }
            set uri(value) {
                this._uri = value;
            }
            get accessibilityText() {
                return this._accessibilityText;
            }
            set accessibilityText(value) {
                this._accessibilityText = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                Audio.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    uri: this.uri,
                    accessibilityText: this.accessibilityText
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    uri: this.uri,
                    accessibilityText: this.accessibilityText
                };
            }
        }
        Audio.id = 'ondewo.nlu.Audio';
        Message.Audio = Audio;
        /**
         * Message implementation for ondewo.nlu.SelectItemInfo
         */
        class SelectItemInfo {
            /**
             * Message constructor. Initializes the properties and applies default Protobuf values if necessary
             * @param _value initial values object or instance of SelectItemInfo to deeply clone from
             */
            constructor(_value) {
                _value = _value || {};
                this.key = _value.key;
                this.synonyms = (_value.synonyms || []).slice();
                SelectItemInfo.refineValues(this);
            }
            /**
             * Deserialize binary data to message
             * @param instance message instance
             */
            static deserializeBinary(bytes) {
                const instance = new SelectItemInfo();
                SelectItemInfo.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
                return instance;
            }
            /**
             * Check all the properties and set default protobuf values if necessary
             * @param _instance message instance
             */
            static refineValues(_instance) {
                _instance.key = _instance.key || '';
                _instance.synonyms = _instance.synonyms || [];
            }
            /**
             * Deserializes / reads binary message into message instance using provided binary reader
             * @param _instance message instance
             * @param _reader binary reader instance
             */
            static deserializeBinaryFromReader(_instance, _reader) {
                while (_reader.nextField()) {
                    if (_reader.isEndGroup())
                        break;
                    switch (_reader.getFieldNumber()) {
                        case 1:
                            _instance.key = _reader.readString();
                            break;
                        case 2:
                            (_instance.synonyms = _instance.synonyms || []).push(_reader.readString());
                            break;
                        default:
                            _reader.skipField();
                    }
                }
                SelectItemInfo.refineValues(_instance);
            }
            /**
             * Serializes a message to binary format using provided binary reader
             * @param _instance message instance
             * @param _writer binary writer instance
             */
            static serializeBinaryToWriter(_instance, _writer) {
                if (_instance.key) {
                    _writer.writeString(1, _instance.key);
                }
                if (_instance.synonyms && _instance.synonyms.length) {
                    _writer.writeRepeatedString(2, _instance.synonyms);
                }
            }
            get key() {
                return this._key;
            }
            set key(value) {
                this._key = value;
            }
            get synonyms() {
                return this._synonyms;
            }
            set synonyms(value) {
                this._synonyms = value;
            }
            /**
             * Serialize message to binary data
             * @param instance message instance
             */
            serializeBinary() {
                const writer = new BinaryWriter();
                SelectItemInfo.serializeBinaryToWriter(this, writer);
                return writer.getResultBuffer();
            }
            /**
             * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
             */
            toObject() {
                return {
                    key: this.key,
                    synonyms: (this.synonyms || []).slice()
                };
            }
            /**
             * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
             */
            toJSON() {
                return this.toObject();
            }
            /**
             * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
             * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
             * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
             */
            toProtobufJSON(
            // @ts-ignore
            options) {
                return {
                    key: this.key,
                    synonyms: (this.synonyms || []).slice()
                };
            }
        }
        SelectItemInfo.id = 'ondewo.nlu.SelectItemInfo';
        Message.SelectItemInfo = SelectItemInfo;
    })(Message = Intent.Message || (Intent.Message = {}));
    /**
     * Message implementation for ondewo.nlu.FollowupIntentInfo
     */
    class FollowupIntentInfo {
        /**
         * Message constructor. Initializes the properties and applies default Protobuf values if necessary
         * @param _value initial values object or instance of FollowupIntentInfo to deeply clone from
         */
        constructor(_value) {
            _value = _value || {};
            this.followupIntentName = _value.followupIntentName;
            this.parentFollowupIntentName = _value.parentFollowupIntentName;
            FollowupIntentInfo.refineValues(this);
        }
        /**
         * Deserialize binary data to message
         * @param instance message instance
         */
        static deserializeBinary(bytes) {
            const instance = new FollowupIntentInfo();
            FollowupIntentInfo.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
            return instance;
        }
        /**
         * Check all the properties and set default protobuf values if necessary
         * @param _instance message instance
         */
        static refineValues(_instance) {
            _instance.followupIntentName = _instance.followupIntentName || '';
            _instance.parentFollowupIntentName =
                _instance.parentFollowupIntentName || '';
        }
        /**
         * Deserializes / reads binary message into message instance using provided binary reader
         * @param _instance message instance
         * @param _reader binary reader instance
         */
        static deserializeBinaryFromReader(_instance, _reader) {
            while (_reader.nextField()) {
                if (_reader.isEndGroup())
                    break;
                switch (_reader.getFieldNumber()) {
                    case 1:
                        _instance.followupIntentName = _reader.readString();
                        break;
                    case 2:
                        _instance.parentFollowupIntentName = _reader.readString();
                        break;
                    default:
                        _reader.skipField();
                }
            }
            FollowupIntentInfo.refineValues(_instance);
        }
        /**
         * Serializes a message to binary format using provided binary reader
         * @param _instance message instance
         * @param _writer binary writer instance
         */
        static serializeBinaryToWriter(_instance, _writer) {
            if (_instance.followupIntentName) {
                _writer.writeString(1, _instance.followupIntentName);
            }
            if (_instance.parentFollowupIntentName) {
                _writer.writeString(2, _instance.parentFollowupIntentName);
            }
        }
        get followupIntentName() {
            return this._followupIntentName;
        }
        set followupIntentName(value) {
            this._followupIntentName = value;
        }
        get parentFollowupIntentName() {
            return this._parentFollowupIntentName;
        }
        set parentFollowupIntentName(value) {
            this._parentFollowupIntentName = value;
        }
        /**
         * Serialize message to binary data
         * @param instance message instance
         */
        serializeBinary() {
            const writer = new BinaryWriter();
            FollowupIntentInfo.serializeBinaryToWriter(this, writer);
            return writer.getResultBuffer();
        }
        /**
         * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
         */
        toObject() {
            return {
                followupIntentName: this.followupIntentName,
                parentFollowupIntentName: this.parentFollowupIntentName
            };
        }
        /**
         * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
         */
        toJSON() {
            return this.toObject();
        }
        /**
         * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
         * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
         * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
         */
        toProtobufJSON(
        // @ts-ignore
        options) {
            return {
                followupIntentName: this.followupIntentName,
                parentFollowupIntentName: this.parentFollowupIntentName
            };
        }
    }
    FollowupIntentInfo.id = 'ondewo.nlu.FollowupIntentInfo';
    Intent.FollowupIntentInfo = FollowupIntentInfo;
})(Intent || (Intent = {}));
/**
 * Message implementation for ondewo.nlu.ListIntentsRequest
 */
export class ListIntentsRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListIntentsRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.languageCode = _value.languageCode;
        this.intentView = _value.intentView;
        this.pageToken = _value.pageToken;
        this.filterByCategory = _value.filterByCategory;
        this.sortByField = _value.sortByField
            ? new IntentSorting(_value.sortByField)
            : undefined;
        ListIntentsRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListIntentsRequest();
        ListIntentsRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.intentView = _instance.intentView || 0;
        _instance.pageToken = _instance.pageToken || '';
        _instance.filterByCategory = _instance.filterByCategory || 0;
        _instance.sortByField = _instance.sortByField || undefined;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.languageCode = _reader.readString();
                    break;
                case 3:
                    _instance.intentView = _reader.readEnum();
                    break;
                case 5:
                    _instance.pageToken = _reader.readString();
                    break;
                case 6:
                    _instance.filterByCategory = _reader.readEnum();
                    break;
                case 7:
                    _instance.sortByField = new IntentSorting();
                    _reader.readMessage(_instance.sortByField, IntentSorting.deserializeBinaryFromReader);
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListIntentsRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.languageCode) {
            _writer.writeString(2, _instance.languageCode);
        }
        if (_instance.intentView) {
            _writer.writeEnum(3, _instance.intentView);
        }
        if (_instance.pageToken) {
            _writer.writeString(5, _instance.pageToken);
        }
        if (_instance.filterByCategory) {
            _writer.writeEnum(6, _instance.filterByCategory);
        }
        if (_instance.sortByField) {
            _writer.writeMessage(7, _instance.sortByField, IntentSorting.serializeBinaryToWriter);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get intentView() {
        return this._intentView;
    }
    set intentView(value) {
        this._intentView = value;
    }
    get pageToken() {
        return this._pageToken;
    }
    set pageToken(value) {
        this._pageToken = value;
    }
    get filterByCategory() {
        return this._filterByCategory;
    }
    set filterByCategory(value) {
        this._filterByCategory = value;
    }
    get sortByField() {
        return this._sortByField;
    }
    set sortByField(value) {
        this._sortByField = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListIntentsRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            languageCode: this.languageCode,
            intentView: this.intentView,
            pageToken: this.pageToken,
            filterByCategory: this.filterByCategory,
            sortByField: this.sortByField ? this.sortByField.toObject() : undefined
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        var _a, _b;
        return {
            parent: this.parent,
            languageCode: this.languageCode,
            intentView: IntentView[(_a = this.intentView) !== null && _a !== void 0 ? _a : 0],
            pageToken: this.pageToken,
            filterByCategory: IntentCategory[(_b = this.filterByCategory) !== null && _b !== void 0 ? _b : 0],
            sortByField: this.sortByField
                ? this.sortByField.toProtobufJSON(options)
                : null
        };
    }
}
ListIntentsRequest.id = 'ondewo.nlu.ListIntentsRequest';
/**
 * Message implementation for ondewo.nlu.ListIntentsResponse
 */
export class ListIntentsResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of ListIntentsResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.intents = (_value.intents || []).map(m => new Intent(m));
        this.nextPageToken = _value.nextPageToken;
        ListIntentsResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new ListIntentsResponse();
        ListIntentsResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.intents = _instance.intents || [];
        _instance.nextPageToken = _instance.nextPageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Intent();
                    _reader.readMessage(messageInitializer1, Intent.deserializeBinaryFromReader);
                    (_instance.intents = _instance.intents || []).push(messageInitializer1);
                    break;
                case 2:
                    _instance.nextPageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        ListIntentsResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.intents && _instance.intents.length) {
            _writer.writeRepeatedMessage(1, _instance.intents, Intent.serializeBinaryToWriter);
        }
        if (_instance.nextPageToken) {
            _writer.writeString(2, _instance.nextPageToken);
        }
    }
    get intents() {
        return this._intents;
    }
    set intents(value) {
        this._intents = value;
    }
    get nextPageToken() {
        return this._nextPageToken;
    }
    set nextPageToken(value) {
        this._nextPageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        ListIntentsResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            intents: (this.intents || []).map(m => m.toObject()),
            nextPageToken: this.nextPageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            intents: (this.intents || []).map(m => m.toProtobufJSON(options)),
            nextPageToken: this.nextPageToken
        };
    }
}
ListIntentsResponse.id = 'ondewo.nlu.ListIntentsResponse';
/**
 * Message implementation for ondewo.nlu.GetIntentRequest
 */
export class GetIntentRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of GetIntentRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        this.languageCode = _value.languageCode;
        this.intentView = _value.intentView;
        this.pageToken = _value.pageToken;
        GetIntentRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new GetIntentRequest();
        GetIntentRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.intentView = _instance.intentView || 0;
        _instance.pageToken = _instance.pageToken || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                case 2:
                    _instance.languageCode = _reader.readString();
                    break;
                case 3:
                    _instance.intentView = _reader.readEnum();
                    break;
                case 10:
                    _instance.pageToken = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        GetIntentRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
        if (_instance.languageCode) {
            _writer.writeString(2, _instance.languageCode);
        }
        if (_instance.intentView) {
            _writer.writeEnum(3, _instance.intentView);
        }
        if (_instance.pageToken) {
            _writer.writeString(10, _instance.pageToken);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get intentView() {
        return this._intentView;
    }
    set intentView(value) {
        this._intentView = value;
    }
    get pageToken() {
        return this._pageToken;
    }
    set pageToken(value) {
        this._pageToken = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        GetIntentRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name,
            languageCode: this.languageCode,
            intentView: this.intentView,
            pageToken: this.pageToken
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        var _a;
        return {
            name: this.name,
            languageCode: this.languageCode,
            intentView: IntentView[(_a = this.intentView) !== null && _a !== void 0 ? _a : 0],
            pageToken: this.pageToken
        };
    }
}
GetIntentRequest.id = 'ondewo.nlu.GetIntentRequest';
/**
 * Message implementation for ondewo.nlu.CreateIntentRequest
 */
export class CreateIntentRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of CreateIntentRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.intent = _value.intent ? new Intent(_value.intent) : undefined;
        this.languageCode = _value.languageCode;
        this.intentView = _value.intentView;
        CreateIntentRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new CreateIntentRequest();
        CreateIntentRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.intent = _instance.intent || undefined;
        _instance.languageCode = _instance.languageCode || '';
        _instance.intentView = _instance.intentView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.intent = new Intent();
                    _reader.readMessage(_instance.intent, Intent.deserializeBinaryFromReader);
                    break;
                case 3:
                    _instance.languageCode = _reader.readString();
                    break;
                case 4:
                    _instance.intentView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        CreateIntentRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.intent) {
            _writer.writeMessage(2, _instance.intent, Intent.serializeBinaryToWriter);
        }
        if (_instance.languageCode) {
            _writer.writeString(3, _instance.languageCode);
        }
        if (_instance.intentView) {
            _writer.writeEnum(4, _instance.intentView);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get intent() {
        return this._intent;
    }
    set intent(value) {
        this._intent = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get intentView() {
        return this._intentView;
    }
    set intentView(value) {
        this._intentView = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        CreateIntentRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            intent: this.intent ? this.intent.toObject() : undefined,
            languageCode: this.languageCode,
            intentView: this.intentView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        var _a;
        return {
            parent: this.parent,
            intent: this.intent ? this.intent.toProtobufJSON(options) : null,
            languageCode: this.languageCode,
            intentView: IntentView[(_a = this.intentView) !== null && _a !== void 0 ? _a : 0]
        };
    }
}
CreateIntentRequest.id = 'ondewo.nlu.CreateIntentRequest';
/**
 * Message implementation for ondewo.nlu.UpdateIntentRequest
 */
export class UpdateIntentRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of UpdateIntentRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.intent = _value.intent ? new Intent(_value.intent) : undefined;
        this.languageCode = _value.languageCode;
        this.updateMask = _value.updateMask
            ? new googleProtobuf004.FieldMask(_value.updateMask)
            : undefined;
        this.intentView = _value.intentView;
        UpdateIntentRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new UpdateIntentRequest();
        UpdateIntentRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.intent = _instance.intent || undefined;
        _instance.languageCode = _instance.languageCode || '';
        _instance.updateMask = _instance.updateMask || undefined;
        _instance.intentView = _instance.intentView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.intent = new Intent();
                    _reader.readMessage(_instance.intent, Intent.deserializeBinaryFromReader);
                    break;
                case 2:
                    _instance.languageCode = _reader.readString();
                    break;
                case 3:
                    _instance.updateMask = new googleProtobuf004.FieldMask();
                    _reader.readMessage(_instance.updateMask, googleProtobuf004.FieldMask.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.intentView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        UpdateIntentRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.intent) {
            _writer.writeMessage(1, _instance.intent, Intent.serializeBinaryToWriter);
        }
        if (_instance.languageCode) {
            _writer.writeString(2, _instance.languageCode);
        }
        if (_instance.updateMask) {
            _writer.writeMessage(3, _instance.updateMask, googleProtobuf004.FieldMask.serializeBinaryToWriter);
        }
        if (_instance.intentView) {
            _writer.writeEnum(4, _instance.intentView);
        }
    }
    get intent() {
        return this._intent;
    }
    set intent(value) {
        this._intent = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get updateMask() {
        return this._updateMask;
    }
    set updateMask(value) {
        this._updateMask = value;
    }
    get intentView() {
        return this._intentView;
    }
    set intentView(value) {
        this._intentView = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        UpdateIntentRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            intent: this.intent ? this.intent.toObject() : undefined,
            languageCode: this.languageCode,
            updateMask: this.updateMask ? this.updateMask.toObject() : undefined,
            intentView: this.intentView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        var _a;
        return {
            intent: this.intent ? this.intent.toProtobufJSON(options) : null,
            languageCode: this.languageCode,
            updateMask: this.updateMask
                ? this.updateMask.toProtobufJSON(options)
                : null,
            intentView: IntentView[(_a = this.intentView) !== null && _a !== void 0 ? _a : 0]
        };
    }
}
UpdateIntentRequest.id = 'ondewo.nlu.UpdateIntentRequest';
/**
 * Message implementation for ondewo.nlu.DeleteIntentRequest
 */
export class DeleteIntentRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of DeleteIntentRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.name = _value.name;
        DeleteIntentRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new DeleteIntentRequest();
        DeleteIntentRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.name = _instance.name || '';
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.name = _reader.readString();
                    break;
                default:
                    _reader.skipField();
            }
        }
        DeleteIntentRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.name) {
            _writer.writeString(1, _instance.name);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        DeleteIntentRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            name: this.name
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            name: this.name
        };
    }
}
DeleteIntentRequest.id = 'ondewo.nlu.DeleteIntentRequest';
/**
 * Message implementation for ondewo.nlu.BatchUpdateIntentsRequest
 */
export class BatchUpdateIntentsRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchUpdateIntentsRequest to deeply clone from
     */
    constructor(_value) {
        this._intentBatch = BatchUpdateIntentsRequest.IntentBatchCase.none;
        _value = _value || {};
        this.parent = _value.parent;
        this.intentBatchUri = _value.intentBatchUri;
        this.intentBatchInline = _value.intentBatchInline
            ? new IntentBatch(_value.intentBatchInline)
            : undefined;
        this.languageCode = _value.languageCode;
        this.updateMask = _value.updateMask
            ? new googleProtobuf004.FieldMask(_value.updateMask)
            : undefined;
        this.intentView = _value.intentView;
        BatchUpdateIntentsRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchUpdateIntentsRequest();
        BatchUpdateIntentsRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.languageCode = _instance.languageCode || '';
        _instance.updateMask = _instance.updateMask || undefined;
        _instance.intentView = _instance.intentView || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    _instance.intentBatchUri = _reader.readString();
                    break;
                case 3:
                    _instance.intentBatchInline = new IntentBatch();
                    _reader.readMessage(_instance.intentBatchInline, IntentBatch.deserializeBinaryFromReader);
                    break;
                case 4:
                    _instance.languageCode = _reader.readString();
                    break;
                case 5:
                    _instance.updateMask = new googleProtobuf004.FieldMask();
                    _reader.readMessage(_instance.updateMask, googleProtobuf004.FieldMask.deserializeBinaryFromReader);
                    break;
                case 6:
                    _instance.intentView = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchUpdateIntentsRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.intentBatchUri || _instance.intentBatchUri === '') {
            _writer.writeString(2, _instance.intentBatchUri);
        }
        if (_instance.intentBatchInline) {
            _writer.writeMessage(3, _instance.intentBatchInline, IntentBatch.serializeBinaryToWriter);
        }
        if (_instance.languageCode) {
            _writer.writeString(4, _instance.languageCode);
        }
        if (_instance.updateMask) {
            _writer.writeMessage(5, _instance.updateMask, googleProtobuf004.FieldMask.serializeBinaryToWriter);
        }
        if (_instance.intentView) {
            _writer.writeEnum(6, _instance.intentView);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get intentBatchUri() {
        return this._intentBatchUri;
    }
    set intentBatchUri(value) {
        if (value !== undefined && value !== null) {
            this._intentBatchInline = undefined;
            this._intentBatch =
                BatchUpdateIntentsRequest.IntentBatchCase.intentBatchUri;
        }
        this._intentBatchUri = value;
    }
    get intentBatchInline() {
        return this._intentBatchInline;
    }
    set intentBatchInline(value) {
        if (value !== undefined && value !== null) {
            this._intentBatchUri = undefined;
            this._intentBatch =
                BatchUpdateIntentsRequest.IntentBatchCase.intentBatchInline;
        }
        this._intentBatchInline = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    get updateMask() {
        return this._updateMask;
    }
    set updateMask(value) {
        this._updateMask = value;
    }
    get intentView() {
        return this._intentView;
    }
    set intentView(value) {
        this._intentView = value;
    }
    get intentBatch() {
        return this._intentBatch;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchUpdateIntentsRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            intentBatchUri: this.intentBatchUri,
            intentBatchInline: this.intentBatchInline
                ? this.intentBatchInline.toObject()
                : undefined,
            languageCode: this.languageCode,
            updateMask: this.updateMask ? this.updateMask.toObject() : undefined,
            intentView: this.intentView
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        var _a, _b;
        return {
            parent: this.parent,
            intentBatchUri: (_a = this.intentBatchUri) !== null && _a !== void 0 ? _a : null,
            intentBatchInline: this.intentBatchInline
                ? this.intentBatchInline.toProtobufJSON(options)
                : null,
            languageCode: this.languageCode,
            updateMask: this.updateMask
                ? this.updateMask.toProtobufJSON(options)
                : null,
            intentView: IntentView[(_b = this.intentView) !== null && _b !== void 0 ? _b : 0]
        };
    }
}
BatchUpdateIntentsRequest.id = 'ondewo.nlu.BatchUpdateIntentsRequest';
(function (BatchUpdateIntentsRequest) {
    let IntentBatchCase;
    (function (IntentBatchCase) {
        IntentBatchCase[IntentBatchCase["none"] = 0] = "none";
        IntentBatchCase[IntentBatchCase["intentBatchUri"] = 1] = "intentBatchUri";
        IntentBatchCase[IntentBatchCase["intentBatchInline"] = 2] = "intentBatchInline";
    })(IntentBatchCase = BatchUpdateIntentsRequest.IntentBatchCase || (BatchUpdateIntentsRequest.IntentBatchCase = {}));
})(BatchUpdateIntentsRequest || (BatchUpdateIntentsRequest = {}));
/**
 * Message implementation for ondewo.nlu.BatchUpdateIntentsResponse
 */
export class BatchUpdateIntentsResponse {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchUpdateIntentsResponse to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.intents = (_value.intents || []).map(m => new Intent(m));
        BatchUpdateIntentsResponse.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchUpdateIntentsResponse();
        BatchUpdateIntentsResponse.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.intents = _instance.intents || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Intent();
                    _reader.readMessage(messageInitializer1, Intent.deserializeBinaryFromReader);
                    (_instance.intents = _instance.intents || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchUpdateIntentsResponse.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.intents && _instance.intents.length) {
            _writer.writeRepeatedMessage(1, _instance.intents, Intent.serializeBinaryToWriter);
        }
    }
    get intents() {
        return this._intents;
    }
    set intents(value) {
        this._intents = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchUpdateIntentsResponse.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            intents: (this.intents || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            intents: (this.intents || []).map(m => m.toProtobufJSON(options))
        };
    }
}
BatchUpdateIntentsResponse.id = 'ondewo.nlu.BatchUpdateIntentsResponse';
/**
 * Message implementation for ondewo.nlu.BatchDeleteIntentsRequest
 */
export class BatchDeleteIntentsRequest {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of BatchDeleteIntentsRequest to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.parent = _value.parent;
        this.intents = (_value.intents || []).map(m => new Intent(m));
        BatchDeleteIntentsRequest.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new BatchDeleteIntentsRequest();
        BatchDeleteIntentsRequest.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.parent = _instance.parent || '';
        _instance.intents = _instance.intents || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.parent = _reader.readString();
                    break;
                case 2:
                    const messageInitializer2 = new Intent();
                    _reader.readMessage(messageInitializer2, Intent.deserializeBinaryFromReader);
                    (_instance.intents = _instance.intents || []).push(messageInitializer2);
                    break;
                default:
                    _reader.skipField();
            }
        }
        BatchDeleteIntentsRequest.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.parent) {
            _writer.writeString(1, _instance.parent);
        }
        if (_instance.intents && _instance.intents.length) {
            _writer.writeRepeatedMessage(2, _instance.intents, Intent.serializeBinaryToWriter);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get intents() {
        return this._intents;
    }
    set intents(value) {
        this._intents = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        BatchDeleteIntentsRequest.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            parent: this.parent,
            intents: (this.intents || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            parent: this.parent,
            intents: (this.intents || []).map(m => m.toProtobufJSON(options))
        };
    }
}
BatchDeleteIntentsRequest.id = 'ondewo.nlu.BatchDeleteIntentsRequest';
/**
 * Message implementation for ondewo.nlu.IntentBatch
 */
export class IntentBatch {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of IntentBatch to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.intents = (_value.intents || []).map(m => new Intent(m));
        IntentBatch.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new IntentBatch();
        IntentBatch.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.intents = _instance.intents || [];
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Intent();
                    _reader.readMessage(messageInitializer1, Intent.deserializeBinaryFromReader);
                    (_instance.intents = _instance.intents || []).push(messageInitializer1);
                    break;
                default:
                    _reader.skipField();
            }
        }
        IntentBatch.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.intents && _instance.intents.length) {
            _writer.writeRepeatedMessage(1, _instance.intents, Intent.serializeBinaryToWriter);
        }
    }
    get intents() {
        return this._intents;
    }
    set intents(value) {
        this._intents = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        IntentBatch.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            intents: (this.intents || []).map(m => m.toObject())
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        return {
            intents: (this.intents || []).map(m => m.toProtobufJSON(options))
        };
    }
}
IntentBatch.id = 'ondewo.nlu.IntentBatch';
/**
 * Message implementation for ondewo.nlu.IntentSorting
 */
export class IntentSorting {
    /**
     * Message constructor. Initializes the properties and applies default Protobuf values if necessary
     * @param _value initial values object or instance of IntentSorting to deeply clone from
     */
    constructor(_value) {
        _value = _value || {};
        this.sortingField = _value.sortingField;
        this.sortingMode = _value.sortingMode;
        IntentSorting.refineValues(this);
    }
    /**
     * Deserialize binary data to message
     * @param instance message instance
     */
    static deserializeBinary(bytes) {
        const instance = new IntentSorting();
        IntentSorting.deserializeBinaryFromReader(instance, new BinaryReader(bytes));
        return instance;
    }
    /**
     * Check all the properties and set default protobuf values if necessary
     * @param _instance message instance
     */
    static refineValues(_instance) {
        _instance.sortingField = _instance.sortingField || 0;
        _instance.sortingMode = _instance.sortingMode || 0;
    }
    /**
     * Deserializes / reads binary message into message instance using provided binary reader
     * @param _instance message instance
     * @param _reader binary reader instance
     */
    static deserializeBinaryFromReader(_instance, _reader) {
        while (_reader.nextField()) {
            if (_reader.isEndGroup())
                break;
            switch (_reader.getFieldNumber()) {
                case 1:
                    _instance.sortingField = _reader.readEnum();
                    break;
                case 2:
                    _instance.sortingMode = _reader.readEnum();
                    break;
                default:
                    _reader.skipField();
            }
        }
        IntentSorting.refineValues(_instance);
    }
    /**
     * Serializes a message to binary format using provided binary reader
     * @param _instance message instance
     * @param _writer binary writer instance
     */
    static serializeBinaryToWriter(_instance, _writer) {
        if (_instance.sortingField) {
            _writer.writeEnum(1, _instance.sortingField);
        }
        if (_instance.sortingMode) {
            _writer.writeEnum(2, _instance.sortingMode);
        }
    }
    get sortingField() {
        return this._sortingField;
    }
    set sortingField(value) {
        this._sortingField = value;
    }
    get sortingMode() {
        return this._sortingMode;
    }
    set sortingMode(value) {
        this._sortingMode = value;
    }
    /**
     * Serialize message to binary data
     * @param instance message instance
     */
    serializeBinary() {
        const writer = new BinaryWriter();
        IntentSorting.serializeBinaryToWriter(this, writer);
        return writer.getResultBuffer();
    }
    /**
     * Cast message to standard JavaScript object (all non-primitive values are deeply cloned)
     */
    toObject() {
        return {
            sortingField: this.sortingField,
            sortingMode: this.sortingMode
        };
    }
    /**
     * Convenience method to support JSON.stringify(message), replicates the structure of toObject()
     */
    toJSON() {
        return this.toObject();
    }
    /**
     * Cast message to JSON using protobuf JSON notation: https://developers.google.com/protocol-buffers/docs/proto3#json
     * Attention: output differs from toObject() e.g. enums are represented as names and not as numbers, Timestamp is an ISO Date string format etc.
     * If the message itself or some of descendant messages is google.protobuf.Any, you MUST provide a message pool as options. If not, the messagePool is not required
     */
    toProtobufJSON(
    // @ts-ignore
    options) {
        var _a, _b;
        return {
            sortingField: IntentSorting.IntentSortingField[(_a = this.sortingField) !== null && _a !== void 0 ? _a : 0],
            sortingMode: ondewoNlu008.SortingMode[(_b = this.sortingMode) !== null && _b !== void 0 ? _b : 0]
        };
    }
}
IntentSorting.id = 'ondewo.nlu.IntentSorting';
(function (IntentSorting) {
    let IntentSortingField;
    (function (IntentSortingField) {
        IntentSortingField[IntentSortingField["NO_INTENT_SORTING"] = 0] = "NO_INTENT_SORTING";
        IntentSortingField[IntentSortingField["SORT_INTENT_BY_NAME"] = 1] = "SORT_INTENT_BY_NAME";
        IntentSortingField[IntentSortingField["SORT_INTENT_BY_CREATION_DATE"] = 2] = "SORT_INTENT_BY_CREATION_DATE";
        IntentSortingField[IntentSortingField["SORT_INTENT_BY_LAST_UPDATED"] = 3] = "SORT_INTENT_BY_LAST_UPDATED";
        IntentSortingField[IntentSortingField["SORT_INTENT_BY_USERSAYS_COUNT"] = 4] = "SORT_INTENT_BY_USERSAYS_COUNT";
    })(IntentSortingField = IntentSorting.IntentSortingField || (IntentSorting.IntentSortingField = {}));
})(IntentSorting || (IntentSorting = {}));
//# sourceMappingURL=data:application/json;base64,