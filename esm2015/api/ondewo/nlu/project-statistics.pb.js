import { BinaryReader, BinaryWriter } from 'google-protobuf';
export class GetIntentCountRequest {
    /**
     * Creates an object and applies default Protobuf values
     * @param GetIntentCountRequest value
     */
    constructor(value) {
        value = value || {};
        this.parent = value.parent;
        this.filterByCategory = value.filterByCategory;
        GetIntentCountRequest.refineValues(this);
    }
    static toBinary(instance) {
        const writer = new BinaryWriter();
        GetIntentCountRequest.toBinaryWriter(instance, writer);
        return writer.getResultBuffer();
    }
    static fromBinary(bytes) {
        const instance = new GetIntentCountRequest();
        GetIntentCountRequest.fromBinaryReader(instance, new BinaryReader(bytes));
        return instance;
    }
    static refineValues(instance) {
        instance.parent = instance.parent || '';
        instance.filterByCategory = instance.filterByCategory || 0;
    }
    static fromBinaryReader(instance, reader) {
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    instance.parent = reader.readString();
                    break;
                case 2:
                    instance.filterByCategory = reader.readEnum();
                    break;
                default:
                    reader.skipField();
            }
        }
        GetIntentCountRequest.refineValues(instance);
    }
    static toBinaryWriter(instance, writer) {
        if (instance.parent) {
            writer.writeString(1, instance.parent);
        }
        if (instance.filterByCategory) {
            writer.writeEnum(2, instance.filterByCategory);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get filterByCategory() {
        return this._filterByCategory;
    }
    set filterByCategory(value) {
        this._filterByCategory = value;
    }
    toObject() {
        return {
            parent: this.parent,
            filterByCategory: this.filterByCategory
        };
    }
    toJSON() {
        return this.toObject();
    }
}
export class GetEntityTypeCountRequest {
    /**
     * Creates an object and applies default Protobuf values
     * @param GetEntityTypeCountRequest value
     */
    constructor(value) {
        value = value || {};
        this.parent = value.parent;
        this.filterByCategory = value.filterByCategory;
        GetEntityTypeCountRequest.refineValues(this);
    }
    static toBinary(instance) {
        const writer = new BinaryWriter();
        GetEntityTypeCountRequest.toBinaryWriter(instance, writer);
        return writer.getResultBuffer();
    }
    static fromBinary(bytes) {
        const instance = new GetEntityTypeCountRequest();
        GetEntityTypeCountRequest.fromBinaryReader(instance, new BinaryReader(bytes));
        return instance;
    }
    static refineValues(instance) {
        instance.parent = instance.parent || '';
        instance.filterByCategory = instance.filterByCategory || 0;
    }
    static fromBinaryReader(instance, reader) {
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    instance.parent = reader.readString();
                    break;
                case 2:
                    instance.filterByCategory = reader.readEnum();
                    break;
                default:
                    reader.skipField();
            }
        }
        GetEntityTypeCountRequest.refineValues(instance);
    }
    static toBinaryWriter(instance, writer) {
        if (instance.parent) {
            writer.writeString(1, instance.parent);
        }
        if (instance.filterByCategory) {
            writer.writeEnum(2, instance.filterByCategory);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    get filterByCategory() {
        return this._filterByCategory;
    }
    set filterByCategory(value) {
        this._filterByCategory = value;
    }
    toObject() {
        return {
            parent: this.parent,
            filterByCategory: this.filterByCategory
        };
    }
    toJSON() {
        return this.toObject();
    }
}
export class GetProjectStatRequest {
    /**
     * Creates an object and applies default Protobuf values
     * @param GetProjectStatRequest value
     */
    constructor(value) {
        value = value || {};
        this.parent = value.parent;
        GetProjectStatRequest.refineValues(this);
    }
    static toBinary(instance) {
        const writer = new BinaryWriter();
        GetProjectStatRequest.toBinaryWriter(instance, writer);
        return writer.getResultBuffer();
    }
    static fromBinary(bytes) {
        const instance = new GetProjectStatRequest();
        GetProjectStatRequest.fromBinaryReader(instance, new BinaryReader(bytes));
        return instance;
    }
    static refineValues(instance) {
        instance.parent = instance.parent || '';
    }
    static fromBinaryReader(instance, reader) {
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    instance.parent = reader.readString();
                    break;
                default:
                    reader.skipField();
            }
        }
        GetProjectStatRequest.refineValues(instance);
    }
    static toBinaryWriter(instance, writer) {
        if (instance.parent) {
            writer.writeString(1, instance.parent);
        }
    }
    get parent() {
        return this._parent;
    }
    set parent(value) {
        this._parent = value;
    }
    toObject() {
        return {
            parent: this.parent
        };
    }
    toJSON() {
        return this.toObject();
    }
}
export class GetProjectElementStatRequest {
    /**
     * Creates an object and applies default Protobuf values
     * @param GetProjectElementStatRequest value
     */
    constructor(value) {
        value = value || {};
        this.name = value.name;
        this.languageCode = value.languageCode;
        GetProjectElementStatRequest.refineValues(this);
    }
    static toBinary(instance) {
        const writer = new BinaryWriter();
        GetProjectElementStatRequest.toBinaryWriter(instance, writer);
        return writer.getResultBuffer();
    }
    static fromBinary(bytes) {
        const instance = new GetProjectElementStatRequest();
        GetProjectElementStatRequest.fromBinaryReader(instance, new BinaryReader(bytes));
        return instance;
    }
    static refineValues(instance) {
        instance.name = instance.name || '';
        instance.languageCode = instance.languageCode || '';
    }
    static fromBinaryReader(instance, reader) {
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    instance.name = reader.readString();
                    break;
                case 2:
                    instance.languageCode = reader.readString();
                    break;
                default:
                    reader.skipField();
            }
        }
        GetProjectElementStatRequest.refineValues(instance);
    }
    static toBinaryWriter(instance, writer) {
        if (instance.name) {
            writer.writeString(1, instance.name);
        }
        if (instance.languageCode) {
            writer.writeString(2, instance.languageCode);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get languageCode() {
        return this._languageCode;
    }
    set languageCode(value) {
        this._languageCode = value;
    }
    toObject() {
        return {
            name: this.name,
            languageCode: this.languageCode
        };
    }
    toJSON() {
        return this.toObject();
    }
}
//# sourceMappingURL=data:application/json;base64,