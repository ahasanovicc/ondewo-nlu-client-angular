import { BinaryReader, BinaryWriter } from 'google-protobuf';
import * as googleProtobuf000 from '../../google/protobuf/timestamp.pb';
export class OperationMetadata {
    /**
     * Creates an object and applies default Protobuf values
     * @param OperationMetadata value
     */
    constructor(value) {
        value = value || {};
        this.status = value.status;
        this.parentOperationName = value.parentOperationName;
        this.subOperationNames = (value.subOperationNames || []).slice();
        this.createTime = value.createTime
            ? new googleProtobuf000.Timestamp(value.createTime)
            : undefined;
        this.startTime = value.startTime
            ? new googleProtobuf000.Timestamp(value.startTime)
            : undefined;
        this.endTime = value.endTime
            ? new googleProtobuf000.Timestamp(value.endTime)
            : undefined;
        this.isCancellationRequested = value.isCancellationRequested;
        this.cancelCommand = value.cancelCommand;
        this.userIdCreated = value.userIdCreated;
        this.userIdCancelled = value.userIdCancelled;
        this.projectParent = value.projectParent;
        this.operationType = value.operationType;
        this.hostName = value.hostName;
        this.numReruns = value.numReruns;
        this.maxNumReruns = value.maxNumReruns;
        OperationMetadata.refineValues(this);
    }
    static toBinary(instance) {
        const writer = new BinaryWriter();
        OperationMetadata.toBinaryWriter(instance, writer);
        return writer.getResultBuffer();
    }
    static fromBinary(bytes) {
        const instance = new OperationMetadata();
        OperationMetadata.fromBinaryReader(instance, new BinaryReader(bytes));
        return instance;
    }
    static refineValues(instance) {
        instance.status = instance.status || 0;
        instance.parentOperationName = instance.parentOperationName || '';
        instance.subOperationNames = instance.subOperationNames || [];
        instance.createTime = instance.createTime || undefined;
        instance.startTime = instance.startTime || undefined;
        instance.endTime = instance.endTime || undefined;
        instance.isCancellationRequested =
            instance.isCancellationRequested || false;
        instance.cancelCommand = instance.cancelCommand || '';
        instance.userIdCreated = instance.userIdCreated || '';
        instance.userIdCancelled = instance.userIdCancelled || '';
        instance.projectParent = instance.projectParent || '';
        instance.operationType = instance.operationType || 0;
        instance.hostName = instance.hostName || '';
        instance.numReruns = instance.numReruns || 0;
        instance.maxNumReruns = instance.maxNumReruns || 0;
    }
    static fromBinaryReader(instance, reader) {
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    instance.status = reader.readEnum();
                    break;
                case 2:
                    instance.parentOperationName = reader.readString();
                    break;
                case 3:
                    (instance.subOperationNames = instance.subOperationNames || []).push(reader.readString());
                    break;
                case 4:
                    instance.createTime = new googleProtobuf000.Timestamp();
                    reader.readMessage(instance.createTime, googleProtobuf000.Timestamp.fromBinaryReader);
                    break;
                case 5:
                    instance.startTime = new googleProtobuf000.Timestamp();
                    reader.readMessage(instance.startTime, googleProtobuf000.Timestamp.fromBinaryReader);
                    break;
                case 6:
                    instance.endTime = new googleProtobuf000.Timestamp();
                    reader.readMessage(instance.endTime, googleProtobuf000.Timestamp.fromBinaryReader);
                    break;
                case 7:
                    instance.isCancellationRequested = reader.readBool();
                    break;
                case 8:
                    instance.cancelCommand = reader.readString();
                    break;
                case 9:
                    instance.userIdCreated = reader.readString();
                    break;
                case 10:
                    instance.userIdCancelled = reader.readString();
                    break;
                case 11:
                    instance.projectParent = reader.readString();
                    break;
                case 12:
                    instance.operationType = reader.readEnum();
                    break;
                case 13:
                    instance.hostName = reader.readString();
                    break;
                case 14:
                    instance.numReruns = reader.readInt32();
                    break;
                case 15:
                    instance.maxNumReruns = reader.readInt32();
                    break;
                default:
                    reader.skipField();
            }
        }
        OperationMetadata.refineValues(instance);
    }
    static toBinaryWriter(instance, writer) {
        if (instance.status) {
            writer.writeEnum(1, instance.status);
        }
        if (instance.parentOperationName) {
            writer.writeString(2, instance.parentOperationName);
        }
        if (instance.subOperationNames && instance.subOperationNames.length) {
            writer.writeRepeatedString(3, instance.subOperationNames);
        }
        if (instance.createTime) {
            writer.writeMessage(4, instance.createTime, googleProtobuf000.Timestamp.toBinaryWriter);
        }
        if (instance.startTime) {
            writer.writeMessage(5, instance.startTime, googleProtobuf000.Timestamp.toBinaryWriter);
        }
        if (instance.endTime) {
            writer.writeMessage(6, instance.endTime, googleProtobuf000.Timestamp.toBinaryWriter);
        }
        if (instance.isCancellationRequested) {
            writer.writeBool(7, instance.isCancellationRequested);
        }
        if (instance.cancelCommand) {
            writer.writeString(8, instance.cancelCommand);
        }
        if (instance.userIdCreated) {
            writer.writeString(9, instance.userIdCreated);
        }
        if (instance.userIdCancelled) {
            writer.writeString(10, instance.userIdCancelled);
        }
        if (instance.projectParent) {
            writer.writeString(11, instance.projectParent);
        }
        if (instance.operationType) {
            writer.writeEnum(12, instance.operationType);
        }
        if (instance.hostName) {
            writer.writeString(13, instance.hostName);
        }
        if (instance.numReruns) {
            writer.writeInt32(14, instance.numReruns);
        }
        if (instance.maxNumReruns) {
            writer.writeInt32(15, instance.maxNumReruns);
        }
    }
    get status() {
        return this._status;
    }
    set status(value) {
        this._status = value;
    }
    get parentOperationName() {
        return this._parentOperationName;
    }
    set parentOperationName(value) {
        this._parentOperationName = value;
    }
    get subOperationNames() {
        return this._subOperationNames;
    }
    set subOperationNames(value) {
        this._subOperationNames = value;
    }
    get createTime() {
        return this._createTime;
    }
    set createTime(value) {
        this._createTime = value;
    }
    get startTime() {
        return this._startTime;
    }
    set startTime(value) {
        this._startTime = value;
    }
    get endTime() {
        return this._endTime;
    }
    set endTime(value) {
        this._endTime = value;
    }
    get isCancellationRequested() {
        return this._isCancellationRequested;
    }
    set isCancellationRequested(value) {
        this._isCancellationRequested = value;
    }
    get cancelCommand() {
        return this._cancelCommand;
    }
    set cancelCommand(value) {
        this._cancelCommand = value;
    }
    get userIdCreated() {
        return this._userIdCreated;
    }
    set userIdCreated(value) {
        this._userIdCreated = value;
    }
    get userIdCancelled() {
        return this._userIdCancelled;
    }
    set userIdCancelled(value) {
        this._userIdCancelled = value;
    }
    get projectParent() {
        return this._projectParent;
    }
    set projectParent(value) {
        this._projectParent = value;
    }
    get operationType() {
        return this._operationType;
    }
    set operationType(value) {
        this._operationType = value;
    }
    get hostName() {
        return this._hostName;
    }
    set hostName(value) {
        this._hostName = value;
    }
    get numReruns() {
        return this._numReruns;
    }
    set numReruns(value) {
        this._numReruns = value;
    }
    get maxNumReruns() {
        return this._maxNumReruns;
    }
    set maxNumReruns(value) {
        this._maxNumReruns = value;
    }
    toObject() {
        return {
            status: this.status,
            parentOperationName: this.parentOperationName,
            subOperationNames: (this.subOperationNames || []).slice(),
            createTime: this.createTime ? this.createTime.toObject() : undefined,
            startTime: this.startTime ? this.startTime.toObject() : undefined,
            endTime: this.endTime ? this.endTime.toObject() : undefined,
            isCancellationRequested: this.isCancellationRequested,
            cancelCommand: this.cancelCommand,
            userIdCreated: this.userIdCreated,
            userIdCancelled: this.userIdCancelled,
            projectParent: this.projectParent,
            operationType: this.operationType,
            hostName: this.hostName,
            numReruns: this.numReruns,
            maxNumReruns: this.maxNumReruns
        };
    }
    toJSON() {
        return this.toObject();
    }
}
(function (OperationMetadata) {
    let Status;
    (function (Status) {
        Status[Status["statusUnspecified"] = 0] = "statusUnspecified";
        Status[Status["notStarted"] = 1] = "notStarted";
        Status[Status["inProgress"] = 2] = "inProgress";
        Status[Status["done"] = 3] = "done";
        Status[Status["cancelled"] = 4] = "cancelled";
        Status[Status["failed"] = 5] = "failed";
    })(Status = OperationMetadata.Status || (OperationMetadata.Status = {}));
    let OperationType;
    (function (OperationType) {
        OperationType[OperationType["operationTypeUnspecified"] = 0] = "operationTypeUnspecified";
        OperationType[OperationType["createAgent"] = 1] = "createAgent";
        OperationType[OperationType["importAgent"] = 2] = "importAgent";
        OperationType[OperationType["exportAgent"] = 3] = "exportAgent";
        OperationType[OperationType["deleteAgent"] = 4] = "deleteAgent";
        OperationType[OperationType["restoreAgent"] = 5] = "restoreAgent";
        OperationType[OperationType["buildAgentCache"] = 6] = "buildAgentCache";
        OperationType[OperationType["trainAgent"] = 7] = "trainAgent";
    })(OperationType = OperationMetadata.OperationType || (OperationMetadata.OperationType = {}));
})(OperationMetadata || (OperationMetadata = {}));
//# sourceMappingURL=data:application/json;base64,