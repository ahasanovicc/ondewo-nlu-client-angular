import { BinaryReader, BinaryWriter } from 'google-protobuf';
import * as googleProtobuf000 from '../../google/protobuf/any.pb';
export class Status {
    /**
     * Creates an object and applies default Protobuf values
     * @param Status value
     */
    constructor(value) {
        value = value || {};
        this.code = value.code;
        this.message = value.message;
        this.details = (value.details || []).map(m => new googleProtobuf000.Any(m));
        Status.refineValues(this);
    }
    static toBinary(instance) {
        const writer = new BinaryWriter();
        Status.toBinaryWriter(instance, writer);
        return writer.getResultBuffer();
    }
    static fromBinary(bytes) {
        const instance = new Status();
        Status.fromBinaryReader(instance, new BinaryReader(bytes));
        return instance;
    }
    static refineValues(instance) {
        instance.code = instance.code || 0;
        instance.message = instance.message || '';
        instance.details = instance.details || [];
    }
    static fromBinaryReader(instance, reader) {
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    instance.code = reader.readInt32();
                    break;
                case 2:
                    instance.message = reader.readString();
                    break;
                case 3:
                    const messageInitializer3 = new googleProtobuf000.Any();
                    reader.readMessage(messageInitializer3, googleProtobuf000.Any.fromBinaryReader);
                    (instance.details = instance.details || []).push(messageInitializer3);
                    break;
                default:
                    reader.skipField();
            }
        }
        Status.refineValues(instance);
    }
    static toBinaryWriter(instance, writer) {
        if (instance.code) {
            writer.writeInt32(1, instance.code);
        }
        if (instance.message) {
            writer.writeString(2, instance.message);
        }
        if (instance.details && instance.details.length) {
            writer.writeRepeatedMessage(3, instance.details, googleProtobuf000.Any.toBinaryWriter);
        }
    }
    get code() {
        return this._code;
    }
    set code(value) {
        this._code = value;
    }
    get message() {
        return this._message;
    }
    set message(value) {
        this._message = value;
    }
    get details() {
        return this._details;
    }
    set details(value) {
        this._details = value;
    }
    toObject() {
        return {
            code: this.code,
            message: this.message,
            details: (this.details || []).map(m => m.toObject())
        };
    }
    toJSON() {
        return this.toObject();
    }
}
//# sourceMappingURL=data:application/json;base64,