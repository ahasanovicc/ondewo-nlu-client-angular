import { BinaryReader, BinaryWriter } from 'google-protobuf';
export class Http {
    /**
     * Creates an object and applies default Protobuf values
     * @param Http value
     */
    constructor(value) {
        value = value || {};
        this.rules = (value.rules || []).map(m => new HttpRule(m));
        this.fullyDecodeReservedExpansion = value.fullyDecodeReservedExpansion;
        Http.refineValues(this);
    }
    static toBinary(instance) {
        const writer = new BinaryWriter();
        Http.toBinaryWriter(instance, writer);
        return writer.getResultBuffer();
    }
    static fromBinary(bytes) {
        const instance = new Http();
        Http.fromBinaryReader(instance, new BinaryReader(bytes));
        return instance;
    }
    static refineValues(instance) {
        instance.rules = instance.rules || [];
        instance.fullyDecodeReservedExpansion =
            instance.fullyDecodeReservedExpansion || false;
    }
    static fromBinaryReader(instance, reader) {
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new HttpRule();
                    reader.readMessage(messageInitializer1, HttpRule.fromBinaryReader);
                    (instance.rules = instance.rules || []).push(messageInitializer1);
                    break;
                case 2:
                    instance.fullyDecodeReservedExpansion = reader.readBool();
                    break;
                default:
                    reader.skipField();
            }
        }
        Http.refineValues(instance);
    }
    static toBinaryWriter(instance, writer) {
        if (instance.rules && instance.rules.length) {
            writer.writeRepeatedMessage(1, instance.rules, HttpRule.toBinaryWriter);
        }
        if (instance.fullyDecodeReservedExpansion) {
            writer.writeBool(2, instance.fullyDecodeReservedExpansion);
        }
    }
    get rules() {
        return this._rules;
    }
    set rules(value) {
        this._rules = value;
    }
    get fullyDecodeReservedExpansion() {
        return this._fullyDecodeReservedExpansion;
    }
    set fullyDecodeReservedExpansion(value) {
        this._fullyDecodeReservedExpansion = value;
    }
    toObject() {
        return {
            rules: (this.rules || []).map(m => m.toObject()),
            fullyDecodeReservedExpansion: this.fullyDecodeReservedExpansion
        };
    }
    toJSON() {
        return this.toObject();
    }
}
export class HttpRule {
    /**
     * Creates an object and applies default Protobuf values
     * @param HttpRule value
     */
    constructor(value) {
        this._pattern = HttpRule.PatternCase.none;
        value = value || {};
        this.selector = value.selector;
        this.get = value.get;
        this.put = value.put;
        this.post = value.post;
        this.delete = value.delete;
        this.patch = value.patch;
        this.custom = value.custom
            ? new CustomHttpPattern(value.custom)
            : undefined;
        this.body = value.body;
        this.responseBody = value.responseBody;
        this.additionalBindings = (value.additionalBindings || []).map(m => new HttpRule(m));
        HttpRule.refineValues(this);
    }
    static toBinary(instance) {
        const writer = new BinaryWriter();
        HttpRule.toBinaryWriter(instance, writer);
        return writer.getResultBuffer();
    }
    static fromBinary(bytes) {
        const instance = new HttpRule();
        HttpRule.fromBinaryReader(instance, new BinaryReader(bytes));
        return instance;
    }
    static refineValues(instance) {
        instance.selector = instance.selector || '';
        instance.body = instance.body || '';
        instance.responseBody = instance.responseBody || '';
        instance.additionalBindings = instance.additionalBindings || [];
    }
    static fromBinaryReader(instance, reader) {
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    instance.selector = reader.readString();
                    break;
                case 2:
                    instance.get = reader.readString();
                    break;
                case 3:
                    instance.put = reader.readString();
                    break;
                case 4:
                    instance.post = reader.readString();
                    break;
                case 5:
                    instance.delete = reader.readString();
                    break;
                case 6:
                    instance.patch = reader.readString();
                    break;
                case 8:
                    instance.custom = new CustomHttpPattern();
                    reader.readMessage(instance.custom, CustomHttpPattern.fromBinaryReader);
                    break;
                case 7:
                    instance.body = reader.readString();
                    break;
                case 12:
                    instance.responseBody = reader.readString();
                    break;
                case 11:
                    const messageInitializer11 = new HttpRule();
                    reader.readMessage(messageInitializer11, HttpRule.fromBinaryReader);
                    (instance.additionalBindings =
                        instance.additionalBindings || []).push(messageInitializer11);
                    break;
                default:
                    reader.skipField();
            }
        }
        HttpRule.refineValues(instance);
    }
    static toBinaryWriter(instance, writer) {
        if (instance.selector) {
            writer.writeString(1, instance.selector);
        }
        if (instance.get || instance.get === '') {
            writer.writeString(2, instance.get);
        }
        if (instance.put || instance.put === '') {
            writer.writeString(3, instance.put);
        }
        if (instance.post || instance.post === '') {
            writer.writeString(4, instance.post);
        }
        if (instance.delete || instance.delete === '') {
            writer.writeString(5, instance.delete);
        }
        if (instance.patch || instance.patch === '') {
            writer.writeString(6, instance.patch);
        }
        if (instance.custom) {
            writer.writeMessage(8, instance.custom, CustomHttpPattern.toBinaryWriter);
        }
        if (instance.body) {
            writer.writeString(7, instance.body);
        }
        if (instance.responseBody) {
            writer.writeString(12, instance.responseBody);
        }
        if (instance.additionalBindings && instance.additionalBindings.length) {
            writer.writeRepeatedMessage(11, instance.additionalBindings, HttpRule.toBinaryWriter);
        }
    }
    get selector() {
        return this._selector;
    }
    set selector(value) {
        this._selector = value;
    }
    get get() {
        return this._get;
    }
    set get(value) {
        if (value !== undefined && value !== null) {
            this._put = this._post = this._delete = this._patch = this._custom = undefined;
            this._pattern = HttpRule.PatternCase.get;
        }
        this._get = value;
    }
    get put() {
        return this._put;
    }
    set put(value) {
        if (value !== undefined && value !== null) {
            this._get = this._post = this._delete = this._patch = this._custom = undefined;
            this._pattern = HttpRule.PatternCase.put;
        }
        this._put = value;
    }
    get post() {
        return this._post;
    }
    set post(value) {
        if (value !== undefined && value !== null) {
            this._get = this._put = this._delete = this._patch = this._custom = undefined;
            this._pattern = HttpRule.PatternCase.post;
        }
        this._post = value;
    }
    get delete() {
        return this._delete;
    }
    set delete(value) {
        if (value !== undefined && value !== null) {
            this._get = this._put = this._post = this._patch = this._custom = undefined;
            this._pattern = HttpRule.PatternCase.delete;
        }
        this._delete = value;
    }
    get patch() {
        return this._patch;
    }
    set patch(value) {
        if (value !== undefined && value !== null) {
            this._get = this._put = this._post = this._delete = this._custom = undefined;
            this._pattern = HttpRule.PatternCase.patch;
        }
        this._patch = value;
    }
    get custom() {
        return this._custom;
    }
    set custom(value) {
        if (value !== undefined && value !== null) {
            this._get = this._put = this._post = this._delete = this._patch = undefined;
            this._pattern = HttpRule.PatternCase.custom;
        }
        this._custom = value;
    }
    get body() {
        return this._body;
    }
    set body(value) {
        this._body = value;
    }
    get responseBody() {
        return this._responseBody;
    }
    set responseBody(value) {
        this._responseBody = value;
    }
    get additionalBindings() {
        return this._additionalBindings;
    }
    set additionalBindings(value) {
        this._additionalBindings = value;
    }
    get pattern() {
        return this._pattern;
    }
    toObject() {
        return {
            selector: this.selector,
            get: this.get,
            put: this.put,
            post: this.post,
            delete: this.delete,
            patch: this.patch,
            custom: this.custom ? this.custom.toObject() : undefined,
            body: this.body,
            responseBody: this.responseBody,
            additionalBindings: (this.additionalBindings || []).map(m => m.toObject())
        };
    }
    toJSON() {
        return this.toObject();
    }
}
(function (HttpRule) {
    let PatternCase;
    (function (PatternCase) {
        PatternCase[PatternCase["none"] = 0] = "none";
        PatternCase[PatternCase["get"] = 1] = "get";
        PatternCase[PatternCase["put"] = 2] = "put";
        PatternCase[PatternCase["post"] = 3] = "post";
        PatternCase[PatternCase["delete"] = 4] = "delete";
        PatternCase[PatternCase["patch"] = 5] = "patch";
        PatternCase[PatternCase["custom"] = 6] = "custom";
    })(PatternCase = HttpRule.PatternCase || (HttpRule.PatternCase = {}));
})(HttpRule || (HttpRule = {}));
export class CustomHttpPattern {
    /**
     * Creates an object and applies default Protobuf values
     * @param CustomHttpPattern value
     */
    constructor(value) {
        value = value || {};
        this.kind = value.kind;
        this.path = value.path;
        CustomHttpPattern.refineValues(this);
    }
    static toBinary(instance) {
        const writer = new BinaryWriter();
        CustomHttpPattern.toBinaryWriter(instance, writer);
        return writer.getResultBuffer();
    }
    static fromBinary(bytes) {
        const instance = new CustomHttpPattern();
        CustomHttpPattern.fromBinaryReader(instance, new BinaryReader(bytes));
        return instance;
    }
    static refineValues(instance) {
        instance.kind = instance.kind || '';
        instance.path = instance.path || '';
    }
    static fromBinaryReader(instance, reader) {
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    instance.kind = reader.readString();
                    break;
                case 2:
                    instance.path = reader.readString();
                    break;
                default:
                    reader.skipField();
            }
        }
        CustomHttpPattern.refineValues(instance);
    }
    static toBinaryWriter(instance, writer) {
        if (instance.kind) {
            writer.writeString(1, instance.kind);
        }
        if (instance.path) {
            writer.writeString(2, instance.path);
        }
    }
    get kind() {
        return this._kind;
    }
    set kind(value) {
        this._kind = value;
    }
    get path() {
        return this._path;
    }
    set path(value) {
        this._path = value;
    }
    toObject() {
        return {
            kind: this.kind,
            path: this.path
        };
    }
    toJSON() {
        return this.toObject();
    }
}
//# sourceMappingURL=data:application/json;base64,