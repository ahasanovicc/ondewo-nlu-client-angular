import { BinaryReader, BinaryWriter } from 'google-protobuf';
export var NullValue;
(function (NullValue) {
    NullValue[NullValue["nullValue"] = 0] = "nullValue";
})(NullValue || (NullValue = {}));
export class Struct {
    /**
     * Creates an object and applies default Protobuf values
     * @param Struct value
     */
    constructor(value) {
        value = value || {};
        this.fields = Object.assign({}, (value.fields || {}));
        Struct.refineValues(this);
    }
    static toBinary(instance) {
        const writer = new BinaryWriter();
        Struct.toBinaryWriter(instance, writer);
        return writer.getResultBuffer();
    }
    static fromBinary(bytes) {
        const instance = new Struct();
        Struct.fromBinaryReader(instance, new BinaryReader(bytes));
        return instance;
    }
    static refineValues(instance) {
        instance.fields = instance.fields || {};
    }
    static fromBinaryReader(instance, reader) {
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    const msg_1 = {};
                    reader.readMessage(msg_1, Struct.FieldsEntry.fromBinaryReader);
                    instance.fields = instance.fields || {};
                    instance.fields[msg_1.key] = msg_1.value;
                    break;
                default:
                    reader.skipField();
            }
        }
        Struct.refineValues(instance);
    }
    static toBinaryWriter(instance, writer) {
        if (!!instance.fields) {
            const keys_1 = Object.keys(instance.fields);
            if (keys_1.length) {
                const repeated_1 = keys_1
                    .map(key => ({ key: key, value: instance.fields[key] }))
                    .reduce((r, v) => [...r, v], []);
                writer.writeRepeatedMessage(1, repeated_1, Struct.FieldsEntry.toBinaryWriter);
            }
        }
    }
    get fields() {
        return this._fields;
    }
    set fields(value) {
        this._fields = value;
    }
    toObject() {
        return {
            fields: Object.assign({}, (this.fields || {}))
        };
    }
    toJSON() {
        return this.toObject();
    }
}
(function (Struct) {
    class FieldsEntry {
        /**
         * Creates an object and applies default Protobuf values
         * @param FieldsEntry value
         */
        constructor(value) {
            value = value || {};
            this.key = value.key;
            this.value = value.value ? new Value(value.value) : undefined;
            FieldsEntry.refineValues(this);
        }
        static toBinary(instance) {
            const writer = new BinaryWriter();
            FieldsEntry.toBinaryWriter(instance, writer);
            return writer.getResultBuffer();
        }
        static fromBinary(bytes) {
            const instance = new FieldsEntry();
            FieldsEntry.fromBinaryReader(instance, new BinaryReader(bytes));
            return instance;
        }
        static refineValues(instance) {
            instance.key = instance.key || '';
            instance.value = instance.value || undefined;
        }
        static fromBinaryReader(instance, reader) {
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        instance.key = reader.readString();
                        break;
                    case 2:
                        instance.value = new Value();
                        reader.readMessage(instance.value, Value.fromBinaryReader);
                        break;
                    default:
                        reader.skipField();
                }
            }
            FieldsEntry.refineValues(instance);
        }
        static toBinaryWriter(instance, writer) {
            if (instance.key) {
                writer.writeString(1, instance.key);
            }
            if (instance.value) {
                writer.writeMessage(2, instance.value, Value.toBinaryWriter);
            }
        }
        get key() {
            return this._key;
        }
        set key(value) {
            this._key = value;
        }
        get value() {
            return this._value;
        }
        set value(value) {
            this._value = value;
        }
        toObject() {
            return {
                key: this.key,
                value: this.value ? this.value.toObject() : undefined
            };
        }
        toJSON() {
            return this.toObject();
        }
    }
    Struct.FieldsEntry = FieldsEntry;
})(Struct || (Struct = {}));
export class Value {
    /**
     * Creates an object and applies default Protobuf values
     * @param Value value
     */
    constructor(value) {
        this._kind = Value.KindCase.none;
        value = value || {};
        this.nullValue = value.nullValue;
        this.numberValue = value.numberValue;
        this.stringValue = value.stringValue;
        this.boolValue = value.boolValue;
        this.structValue = value.structValue
            ? new Struct(value.structValue)
            : undefined;
        this.listValue = value.listValue
            ? new ListValue(value.listValue)
            : undefined;
        Value.refineValues(this);
    }
    static toBinary(instance) {
        const writer = new BinaryWriter();
        Value.toBinaryWriter(instance, writer);
        return writer.getResultBuffer();
    }
    static fromBinary(bytes) {
        const instance = new Value();
        Value.fromBinaryReader(instance, new BinaryReader(bytes));
        return instance;
    }
    static refineValues(instance) { }
    static fromBinaryReader(instance, reader) {
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    instance.nullValue = reader.readEnum();
                    break;
                case 2:
                    instance.numberValue = reader.readDouble();
                    break;
                case 3:
                    instance.stringValue = reader.readString();
                    break;
                case 4:
                    instance.boolValue = reader.readBool();
                    break;
                case 5:
                    instance.structValue = new Struct();
                    reader.readMessage(instance.structValue, Struct.fromBinaryReader);
                    break;
                case 6:
                    instance.listValue = new ListValue();
                    reader.readMessage(instance.listValue, ListValue.fromBinaryReader);
                    break;
                default:
                    reader.skipField();
            }
        }
        Value.refineValues(instance);
    }
    static toBinaryWriter(instance, writer) {
        if (instance.nullValue || instance.nullValue === 0) {
            writer.writeEnum(1, instance.nullValue);
        }
        if (instance.numberValue || instance.numberValue === 0) {
            writer.writeDouble(2, instance.numberValue);
        }
        if (instance.stringValue || instance.stringValue === '') {
            writer.writeString(3, instance.stringValue);
        }
        if (instance.boolValue || instance.boolValue === false) {
            writer.writeBool(4, instance.boolValue);
        }
        if (instance.structValue) {
            writer.writeMessage(5, instance.structValue, Struct.toBinaryWriter);
        }
        if (instance.listValue) {
            writer.writeMessage(6, instance.listValue, ListValue.toBinaryWriter);
        }
    }
    get nullValue() {
        return this._nullValue;
    }
    set nullValue(value) {
        if (value !== undefined && value !== null) {
            this._numberValue = this._stringValue = this._boolValue = this._structValue = this._listValue = undefined;
            this._kind = Value.KindCase.nullValue;
        }
        this._nullValue = value;
    }
    get numberValue() {
        return this._numberValue;
    }
    set numberValue(value) {
        if (value !== undefined && value !== null) {
            this._nullValue = this._stringValue = this._boolValue = this._structValue = this._listValue = undefined;
            this._kind = Value.KindCase.numberValue;
        }
        this._numberValue = value;
    }
    get stringValue() {
        return this._stringValue;
    }
    set stringValue(value) {
        if (value !== undefined && value !== null) {
            this._nullValue = this._numberValue = this._boolValue = this._structValue = this._listValue = undefined;
            this._kind = Value.KindCase.stringValue;
        }
        this._stringValue = value;
    }
    get boolValue() {
        return this._boolValue;
    }
    set boolValue(value) {
        if (value !== undefined && value !== null) {
            this._nullValue = this._numberValue = this._stringValue = this._structValue = this._listValue = undefined;
            this._kind = Value.KindCase.boolValue;
        }
        this._boolValue = value;
    }
    get structValue() {
        return this._structValue;
    }
    set structValue(value) {
        if (value !== undefined && value !== null) {
            this._nullValue = this._numberValue = this._stringValue = this._boolValue = this._listValue = undefined;
            this._kind = Value.KindCase.structValue;
        }
        this._structValue = value;
    }
    get listValue() {
        return this._listValue;
    }
    set listValue(value) {
        if (value !== undefined && value !== null) {
            this._nullValue = this._numberValue = this._stringValue = this._boolValue = this._structValue = undefined;
            this._kind = Value.KindCase.listValue;
        }
        this._listValue = value;
    }
    get kind() {
        return this._kind;
    }
    toObject() {
        return {
            nullValue: this.nullValue,
            numberValue: this.numberValue,
            stringValue: this.stringValue,
            boolValue: this.boolValue,
            structValue: this.structValue ? this.structValue.toObject() : undefined,
            listValue: this.listValue ? this.listValue.toObject() : undefined
        };
    }
    toJSON() {
        return this.toObject();
    }
}
(function (Value) {
    let KindCase;
    (function (KindCase) {
        KindCase[KindCase["none"] = 0] = "none";
        KindCase[KindCase["nullValue"] = 1] = "nullValue";
        KindCase[KindCase["numberValue"] = 2] = "numberValue";
        KindCase[KindCase["stringValue"] = 3] = "stringValue";
        KindCase[KindCase["boolValue"] = 4] = "boolValue";
        KindCase[KindCase["structValue"] = 5] = "structValue";
        KindCase[KindCase["listValue"] = 6] = "listValue";
    })(KindCase = Value.KindCase || (Value.KindCase = {}));
})(Value || (Value = {}));
export class ListValue {
    /**
     * Creates an object and applies default Protobuf values
     * @param ListValue value
     */
    constructor(value) {
        value = value || {};
        this.values = (value.values || []).map(m => new Value(m));
        ListValue.refineValues(this);
    }
    static toBinary(instance) {
        const writer = new BinaryWriter();
        ListValue.toBinaryWriter(instance, writer);
        return writer.getResultBuffer();
    }
    static fromBinary(bytes) {
        const instance = new ListValue();
        ListValue.fromBinaryReader(instance, new BinaryReader(bytes));
        return instance;
    }
    static refineValues(instance) {
        instance.values = instance.values || [];
    }
    static fromBinaryReader(instance, reader) {
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    const messageInitializer1 = new Value();
                    reader.readMessage(messageInitializer1, Value.fromBinaryReader);
                    (instance.values = instance.values || []).push(messageInitializer1);
                    break;
                default:
                    reader.skipField();
            }
        }
        ListValue.refineValues(instance);
    }
    static toBinaryWriter(instance, writer) {
        if (instance.values && instance.values.length) {
            writer.writeRepeatedMessage(1, instance.values, Value.toBinaryWriter);
        }
    }
    get values() {
        return this._values;
    }
    set values(value) {
        this._values = value;
    }
    toObject() {
        return {
            values: (this.values || []).map(m => m.toObject())
        };
    }
    toJSON() {
        return this.toObject();
    }
}
//# sourceMappingURL=data:application/json;base64,